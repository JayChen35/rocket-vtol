Help on module raisimpy:

NAME
    raisimpy - Python wrappers for the RaiSim library and visualizer.

SUBMODULES
    constraints
    contact
    ogre

CLASSES
    pybind11_builtins.pybind11_object(builtins.object)
        ArticulatedSystemOption
        BodyType
        CameraMan
        CameraStyle
        CollisionDefinition
        ControlMode
        CoordinateFrame
        GraphicObject
        GyroscopicMode
        MaterialManager
        MaterialPairProperties
        Object
            ArticulatedSystem
            SingleBodyObject
                Box
                Capsule
                Compound
                Cone
                Cylinder
                Ground
                HeightMap
                Mesh
                Sphere
        ObjectType
        OgreVis
        ShapeType
        SimAndGraphicsObjectPool
        TerrainProperties
        Transformation
        VisualObject
        World
        dGeomID
        dSpaceID
        gui
    
    class ArticulatedSystem(Object)
     |  Raisim Articulated System.
     |  
     |  Method resolution order:
     |      ArticulatedSystem
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.ArticulatedSystem) -> None
     |      
     |      Initialize the Articulated System.
     |      
     |      2. __init__(self: raisimpy.ArticulatedSystem, filename: str, resource_directory: str, joint_order: List[str], options: raisimpy.ArticulatedSystemOption) -> None
     |      
     |      Initialize the Articulated System.
     |      
     |      Do not call this method yourself. use World class to create an Articulated system.
     |      
     |      Args:
     |          filename (str): path to the robot description file (URDF, etc).
     |          resource_directory (str): path the resource directory. If empty, it will use the robot description folder.
     |          joint_order (list[str]): specify the joint order, if we want it to be different from the URDF file.
     |          options (ArticulatedSystemOption): options.
     |  
     |  compute_sparse_inverse_mass_matrix(...)
     |      compute_sparse_inverse_mass_matrix(self: raisimpy.ArticulatedSystem, mass_matrix: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |      This computes the inverse mass matrix given the mass matrix. The return type is dense. It exploits the
     |      sparsity of the mass matrix to efficiently perform the computation.
     |      
     |      Args:
     |          mass_matrix (np.array[float[n,n]]): mass matrix.
     |      
     |      Returns:
     |          np.array(float[n,n]): dense inverse matrix.
     |  
     |  get_base_orientation = get_base_quaternion(...)
     |  
     |  get_base_quaternion(...)
     |      get_base_quaternion(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the base orientation (expressed as a quaternion [w,x,y,z]).
     |      
     |      Returns:
     |          np.array[float[4]]: base orientation (expressed as a quaternion [w,x,y,z])
     |  
     |  get_base_rotation_matrix(...)
     |      get_base_rotation_matrix(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the base orientation (expressed as a rotation matrix).
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix
     |  
     |  get_body_index(...)
     |      get_body_index(self: raisimpy.ArticulatedSystem, name: str) -> int
     |      
     |      
     |      Return the body index associated with the given name.
     |      
     |      Args:
     |          name (str): body name.
     |      
     |      Returns:
     |          int: body index.
     |  
     |  get_body_names(...)
     |      get_body_names(self: raisimpy.ArticulatedSystem) -> List[str]
     |      
     |      
     |      Return the body names.
     |      
     |      Returns:
     |          list[str]: list of body names.
     |  
     |  get_body_pose(...)
     |      get_body_pose(self: raisimpy.ArticulatedSystem, body_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Return the body pose (position and orientation (expressed as a quaternion)).
     |      
     |      Args:
     |          body_id (int): body id.
     |      
     |      Returns:
     |          np.array[float[3]]: body position.
     |          np.array[float[4]]: body orientation (expressed as a quaternion [w,x,y,z])
     |  
     |  get_body_pose1(...)
     |      get_body_pose1(self: raisimpy.ArticulatedSystem, body_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Return the body pose (position and orientation (expressed as a rotation matrix)).
     |      
     |      Args:
     |          body_id (int): body id.
     |      
     |      Returns:
     |          np.array[float[3]]: body position.
     |          np.array[float[3,3]]: body orientation (expressed as a rotation matrix)
     |  
     |  get_composite_com(...)
     |      get_composite_com(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the composite center of mass position (i.e. the center of mass of the whole system).
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position.
     |  
     |  get_composite_inertia(...)
     |      get_composite_inertia(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the composite moment of inertia of the whole system.
     |      
     |      Returns:
     |          np.array[float[3, 3]]: moment inertia of the whole system.
     |  
     |  get_control_mode(...)
     |      get_control_mode(self: raisimpy.ArticulatedSystem) -> raisimpy.ControlMode
     |      
     |      
     |      Get the control mode.
     |      
     |      Returns:
     |          ControlMode.Type: control mode type which is one of {FORCE_AND_TORQUE, PD_PLUS_FEEDFORWARD_TORQUE,
     |              VELOCITY_PLUS_FEEDFORWARD_TORQUE}
     |  
     |  get_dense_linear_jacobian(...)
     |      get_dense_linear_jacobian(self: raisimpy.ArticulatedSystem, body_idx: int, world_point: numpy.ndarray[float64]) -> numpy.ndarray[float64[m, n]]
     |      
     |      
     |      Get the dense linear jacobian.
     |      
     |      .. math:: v_{lin} = J(q) \dot{q}
     |      
     |      Args:
     |          body_idx (int): body index.
     |          world_point (np.array[float[3]]): 3d point expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3, n]]: dense linear jacobian.
     |  
     |  get_dense_rotational_jacobian(...)
     |      get_dense_rotational_jacobian(self: raisimpy.ArticulatedSystem, body_idx: int) -> numpy.ndarray[float64[m, n]]
     |      
     |      
     |      Get the dense rotational jacobian.
     |      
     |      .. math:: \omega = J(q) \dot{q}
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3, n]]: dense rotational jacobian.
     |  
     |  get_dof(...)
     |      get_dof(self: raisimpy.ArticulatedSystem) -> int
     |      
     |      
     |      Return the number of degrees of freedom.
     |      
     |      Returns:
     |          int: the number of degrees of freedom.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.ArticulatedSystem, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the system's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_feedforward_generalized_forces(...)
     |      get_feedforward_generalized_forces(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the feedforward generalized forces.
     |      
     |      Returns:
     |          np.array[float[n]]: feedforward generalized forces.
     |  
     |  get_frame_angular_velocity(...)
     |      get_frame_angular_velocity(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the frame angular velocity expressed in the Cartesian world frame.
     |      
     |      Args:
     |          frame_id (int): frame id.
     |      
     |      Returns:
     |          np.array[float[3]]: the coordinate frame angular velocity in the world space.
     |  
     |  get_frame_by_idx(...)
     |      get_frame_by_idx(self: raisimpy.ArticulatedSystem, idx: int) -> raisimpy.CoordinateFrame
     |      
     |      
     |      Get the coordinate frame from its index.
     |      
     |      Args:
     |          idx (int): index of the frame.
     |      
     |      Returns:
     |          CoordinateFrame: the coordinate frame.
     |  
     |  get_frame_by_name(...)
     |      get_frame_by_name(self: raisimpy.ArticulatedSystem, name: str) -> raisimpy.CoordinateFrame
     |      
     |      
     |      Get the coordinate frame from its name.
     |      
     |      Args:
     |          name (str): name of the frame.
     |      
     |      Returns:
     |          CoordinateFrame: the coordinate frame.
     |  
     |  get_frame_idx_by_name(...)
     |      get_frame_idx_by_name(self: raisimpy.ArticulatedSystem, name: str) -> int
     |      
     |      
     |      Get the coordinate frame index from its name.
     |      
     |      Args:
     |          name (str): name of the frame.
     |      
     |      Returns:
     |          int: the corresponding index.
     |  
     |  get_frame_linear_velocity(...)
     |      get_frame_linear_velocity(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the frame linear velocity expressed in the Cartesian world frame.
     |      
     |      Args:
     |          frame_id (int): frame id.
     |      
     |      Returns:
     |          np.array[float[3]]: the coordinate frame linear velocity in the world space.
     |  
     |  get_frame_world_orientation = get_frame_world_quaternion(...)
     |  
     |  get_frame_world_position(...)
     |      get_frame_world_position(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the frame position expressed in the Cartesian world frame.
     |      
     |      Args:
     |          frame_id (int): frame id.
     |      
     |      Returns:
     |          np.array[float[3]]: the coordinate frame position in the world space.
     |  
     |  get_frame_world_quaternion(...)
     |      get_frame_world_quaternion(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the frame orientation as a quaternion ([w,x,y,z]) expressed in the Cartesian world frame.
     |      
     |      Args:
     |          frame_id (int): frame id.
     |      
     |      Returns:
     |          np.array[float[3,3]]: the coordinate frame orientation (quaternion) in the world space.
     |  
     |  get_frame_world_rotation_matrix(...)
     |      get_frame_world_rotation_matrix(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the frame orientation as a rotation matrix expressed in the Cartesian world frame
     |      
     |      Args:
     |          frame_id (int): frame id.
     |      
     |      Returns:
     |          np.array[float[3,3]]: the coordinate frame orientation in the world space.
     |  
     |  get_frames(...)
     |      get_frames(self: raisimpy.ArticulatedSystem) -> List[raisimpy.CoordinateFrame]
     |      
     |      
     |      Get all the coordinate frames.
     |      
     |      Returns:
     |          list[CoordinateFrame]: the coordinate frames.
     |  
     |  get_generalized_coordinate_dim(...)
     |      get_generalized_coordinate_dim(self: raisimpy.ArticulatedSystem) -> int
     |      
     |      
     |      Return the dimension/size of the generalized coordinates vector.
     |      
     |      Returns:
     |          int: the number of generalized coordinates.
     |  
     |  get_generalized_coordinates(...)
     |      get_generalized_coordinates(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the generalized coordinates of the system.
     |      
     |      The dimension of the returned vector is equal to the number of degrees of freedom that each joint provides.
     |      A floating joint provides 6 DoFs (3 linear + 3 revolute), a prismatic/revolute joint 1 DoF, a fixed joint 0
     |      DoF, etc.
     |      
     |      Returns:
     |          np.array[float[n]]: generalized coordinates.
     |  
     |  get_generalized_forces(...)
     |      get_generalized_forces(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the generalized forces.
     |      
     |      Returns:
     |          np.array[float[n]]: generalized forces.
     |  
     |  get_generalized_momentum(...)
     |      get_generalized_momentum(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the generalized momentum which is simply the mass matrix multiplied by the generalized velocities:
     |      
     |      .. math:: H(q) \dot{q}
     |      
     |      where :math:`H(q)` is the mass/inertia matrix, and :math:`\dot{q}` are the generalized velocities.
     |      
     |      Returns:
     |          np.array[float[n]]: generalized momentum.
     |  
     |  get_generalized_velocities(...)
     |      get_generalized_velocities(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the generalized velocities of the system.
     |      
     |      The dimension of the returned vector is equal to the number of degrees of freedom that each joint provides.
     |      A floating joint provides 6 DoFs (3 linear + 3 revolute), a prismatic/revolute joint 1 DoF, a fixed joint 0
     |      DoF, etc.
     |      
     |      Returns:
     |          np.array[float[n]]: generalized velocities.
     |  
     |  get_inertias(...)
     |      get_inertias(self: raisimpy.ArticulatedSystem) -> list
     |      
     |      
     |      Return the inertias (one for each body).
     |      
     |      Returns:
     |          list[np.array[float[3,3]]]: inertias.
     |  
     |  get_inverse_mass_matrix(...)
     |      get_inverse_mass_matrix(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the inverse of the mass (inertia) matrix, where the inertia matrix appears in the dynamic equation of motion:
     |      
     |      .. math:: H(q) \ddot{q} + N(q, \dot{q}) = \tau
     |      
     |      where :math:`H(q)` is the mass inertia matrix, :math:`N(q, \dot{q})` are the non-linear terms, and
     |      :math:`\tau` are the forces/torques.
     |      
     |      Returns:
     |          np.array[float[n,n]]: inverse of the mass inertia matrix.
     |  
     |  get_joint_cartesian_positions(...)
     |      get_joint_cartesian_positions(self: raisimpy.ArticulatedSystem) -> list
     |      
     |      
     |      Return the joint Cartesian positions relative to their parent frame.
     |      
     |      Returns:
     |          list[np.array[float[3]]]: joint cartesian positions (relative to their parent frame).
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.ArticulatedSystem) -> float
     |      
     |      Return the total kinetic energy of the whole system.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the linear momentum of the whole system in Cartesian space.
     |      
     |      Returns:
     |          np.array[float[3]]: total linear momentum.
     |  
     |  get_link_coms(...)
     |      get_link_coms(self: raisimpy.ArticulatedSystem) -> list
     |      
     |      
     |      Return the center of mass of each link (expressed in their body frame).
     |      
     |      Returns:
     |          list[np.array[float[3]]]: center of mass of each link (expressed in the body frame).
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.ArticulatedSystem, localIdx: int) -> float
     |      
     |      
     |      Get the mass of the link.
     |      
     |      Args:
     |          link_idx (int): link index.
     |      
     |      Returns:
     |          float: mass value.
     |  
     |  get_mass_matrix(...)
     |      get_mass_matrix(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the mass (inertia) matrix which is present in the dynamic equation of motion:
     |      
     |      .. math:: H(q) \ddot{q} + N(q, \dot{q}) = \tau
     |      
     |      where :math:`H(q)` is the mass inertia matrix, :math:`N(q, \dot{q})` are the non-linear terms, and
     |      :math:`\tau` are the forces/torques.
     |      
     |      Returns:
     |          np.array[float[n,n]]: mass inertia matrix.
     |  
     |  get_masses(...)
     |      get_masses(self: raisimpy.ArticulatedSystem) -> List[float]
     |      
     |      
     |      Return the body/link masses.
     |      
     |      Returns:
     |          list[double]: body masses.
     |  
     |  get_non_linearities(...)
     |      get_non_linearities(self: raisimpy.ArticulatedSystem) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the non linearity terms that are present in the dynamic equation of motion:
     |      
     |      .. math:: H(q) \ddot{q} + N(q, \dot{q}) = \tau
     |      
     |      where :math:`N(q, \dot{q})` are the non-linear terms, :math:`H(q)` is the inertia matrix, and :math:`\tau` are
     |      the forces/torques.
     |      
     |      Returns:
     |          np.array[float[n]]: non-linearity forces.
     |  
     |  get_num_dof(...)
     |      get_num_dof(self: raisimpy.ArticulatedSystem) -> int
     |      
     |      
     |      Return the number of degrees of freedom.
     |      
     |      Returns:
     |          int: the number of degrees of freedom.
     |  
     |  get_options(...)
     |      get_options(self: raisimpy.ArticulatedSystem) -> raisimpy.ArticulatedSystemOption
     |      
     |      
     |      Return the options associated with the articulated system.
     |      
     |      Returns:
     |          ArticulatedSystemOption: options for the articulated system.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.ArticulatedSystem, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the system's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_resource_directory(...)
     |      get_resource_directory(self: raisimpy.ArticulatedSystem) -> str
     |      
     |      
     |      Get the robot resource directory.
     |      
     |      Returns:
     |          str: robot resource directory.
     |  
     |  get_robot_description_directory_name(...)
     |      get_robot_description_directory_name(self: raisimpy.ArticulatedSystem) -> str
     |      
     |      
     |      Get the robot description top directory name.
     |      
     |      Returns:
     |          str: robot description top directory name.
     |  
     |  get_robot_description_filename(...)
     |      get_robot_description_filename(self: raisimpy.ArticulatedSystem) -> str
     |      
     |      
     |      Get the robot description filename (e.g. path to the URDF).
     |      
     |      Returns:
     |          str: robot description filename.
     |  
     |  get_sparse_linear_jacobian(...)
     |      get_sparse_linear_jacobian(self: raisimpy.ArticulatedSystem, body_idx: int, world_point: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the sparse linear jacobian.
     |      
     |      .. math:: v_{lin} = J(q) \dot{q}
     |      
     |      Args:
     |          body_idx (int): body index.
     |          world_point (np.array[float[3]]): 3d point expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3, n]]: sparse linear jacobian.
     |  
     |  get_sparse_linear_jacobian_time_derivative(...)
     |      get_sparse_linear_jacobian_time_derivative(self: raisimpy.ArticulatedSystem, body_idx: int, world_point: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the time derivative of the sparse linear jacobian :math:`\dot{J}(q)`.
     |      
     |      Args:
     |          body_idx (int): body index.
     |          world_point (np.array[float[3]]): 3d point expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3, n]]: time derivative of the sparse linear jacobian.
     |  
     |  get_sparse_rotational_jacobian(...)
     |      get_sparse_rotational_jacobian(self: raisimpy.ArticulatedSystem, body_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the sparse rotational jacobian.
     |      
     |      .. math:: \omega = J(q) \dot{q}
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3, n]]: sparse rotational jacobian.
     |  
     |  get_sparse_rotational_jacobian_time_derivative(...)
     |      get_sparse_rotational_jacobian_time_derivative(self: raisimpy.ArticulatedSystem, body_idx: int, world_point: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the time derivative of the sparse rotational jacobian :math:`\dot{J}(q)`.
     |      
     |      Args:
     |          body_idx (int): body index.
     |          world_point (np.array[float[3]]): 3d point expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3, n]]: time derivative of the sparse rotational jacobian.
     |  
     |  get_states(...)
     |      get_states(self: raisimpy.ArticulatedSystem) -> tuple
     |      
     |      
     |      Get the joint states.
     |      
     |      Returns:
     |          np.array[float[n]]: generalized coordinates.
     |          np.array[float[n]]: generalized velocities.
     |  
     |  get_total_mass(...)
     |      get_total_mass(self: raisimpy.ArticulatedSystem) -> float
     |      
     |      
     |      Get the total mass of the system.
     |      
     |      Returns:
     |          float: total mass value.
     |  
     |  get_visual_collision_object_pose(...)
     |      get_visual_collision_object_pose(self: raisimpy.ArticulatedSystem, arg0: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the visual collision object pose (where the orientation is expressed as a quaternion).
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3]]: visual object position.
     |          np.array[float[4]]: visual object orientation (expressed as a quaternion [w,x,y,z]).
     |  
     |  get_visual_collision_object_pose1(...)
     |      get_visual_collision_object_pose1(self: raisimpy.ArticulatedSystem, arg0: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the visual collision object pose (where the orientation is expressed as a rotation matrix).
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3]]: visual object position.
     |          np.array[float[3,3]]: visual object orientation (expressed as a rotation matrix).
     |  
     |  get_visual_collision_objects(...)
     |      get_visual_collision_objects(self: raisimpy.ArticulatedSystem) -> List[raisim::VisObject]
     |      
     |      
     |      Get the visual collision objects.
     |      
     |      Returns:
     |          list[VisObject]: list of visual collision objects.
     |  
     |  get_visual_object_pose(...)
     |      get_visual_object_pose(self: raisimpy.ArticulatedSystem, arg0: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the visual object pose (where the orientation is expressed as a quaternion).
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3]]: visual object position.
     |          np.array[float[4]]: visual object orientation (expressed as a quaternion [w,x,y,z]).
     |  
     |  get_visual_object_pose1(...)
     |      get_visual_object_pose1(self: raisimpy.ArticulatedSystem, arg0: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the visual object pose (where the orientation is expressed as a rotation matrix).
     |      
     |      Args:
     |          body_idx (int): body index.
     |      
     |      Returns:
     |          np.array[float[3]]: visual object position.
     |          np.array[float[3,3]]: visual object orientation (expressed as a rotation matrix).
     |  
     |  get_visual_objects(...)
     |      get_visual_objects(self: raisimpy.ArticulatedSystem) -> List[raisim::VisObject]
     |      
     |      
     |      Get the visual objects.
     |      
     |      Returns:
     |          list[VisObject]: list of visual objects.
     |  
     |  get_world_angular_velocity(...)
     |      get_world_angular_velocity(self: raisimpy.ArticulatedSystem, body_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the angular velocity of the body with respect to the world frame.
     |      
     |      Args:
     |          body_id (int): body id.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity of the body expressed in the world frame.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_linear_velocity(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |              Get the joint frame's linear velocity with respect to the world frame.
     |      
     |              Args:
     |                  frame_id (int): frame id.
     |      
     |              Returns:
     |                  np.array[float[3]]: velocity of the joint frame expressed in the world frame.
     |              
     |      
     |      2. get_world_linear_velocity(self: raisimpy.ArticulatedSystem, sparse_linear_jacobian: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |              Return the velocity of the point of the sparse linear jacobian.
     |      
     |              Args:
     |                  sparse_linear_jacobian (np.array[float[3,n]]): sparse linear jacobian.
     |      
     |              Returns:
     |                  np.array[float[3]]: velocity of the point expressed in the world frame.
     |              
     |      
     |      3. get_world_linear_velocity(self: raisimpy.ArticulatedSystem, body_id: int, body_pos: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |              Return the velocity of a point (expressed in the body frame) in the world frame.
     |      
     |              Args:
     |                  body_id (int): body id.
     |                  body_pos (np.array[float[3]]): position of a point on the body frame.
     |      
     |              Returns:
     |                  np.array[float[3]]: velocity of the body expressed in the world frame.
     |  
     |  get_world_orientation = get_world_quaternion(...)
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.ArticulatedSystem, body_idx: int, body_point: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |      
     |      
     |              Get the body's position with respect to the world frame.
     |      
     |              Args:
     |                  body_idx (int): body/link index.
     |                  body_point (np.array[float[3]]): position of point on the body expressed in the body frame.
     |      
     |              Returns:
     |                  np.array[float[3]]: position of the body point in the world frame.
     |              
     |      
     |      2. get_world_position(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |              Get the joint frame's position with respect to the world frame.
     |      
     |              Args:
     |                  frame_id (int): frame id.
     |      
     |              Returns:
     |                  np.array[float[3]]: position of the joint frame expressed in the world frame.
     |  
     |  get_world_quaternion(...)
     |      get_world_quaternion(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the joint frame's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Args:
     |          frame_id (int): frame index.
     |      
     |      Returns:
     |          np.array[float[3]]: orientation (quaternion) of the joint frame expressed in the world frame.
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.ArticulatedSystem, frame_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the joint frame's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Args:
     |          frame_id (int): frame index.
     |      
     |      Returns:
     |          np.array[float[3]]: orientation (rotation matrix) of the joint frame expressed in the world frame.
     |  
     |  ignore_collision_between(...)
     |      ignore_collision_between(self: raisimpy.ArticulatedSystem, body_idx1: int, body_idx2: int) -> None
     |      
     |      
     |      Ignore collision between the 2 specified bodies.
     |      
     |      Args:
     |          body_idx1 (int): first body index.
     |          body_idx2 (int): second body index.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.ArticulatedSystem, gravity: numpy.ndarray[float64], dt: float) -> None
     |      
     |      
     |      This method:
     |      
     |      1. updates kinematics if necessary (if user didn't call it manually).
     |      2. computes the mass matrix, nonlinear term, inverse of the mass matrix, and contact jacobians.
     |      
     |      Note that the `integrate` method will automatically call this method.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |          dt (float): integration time.
     |  
     |  print_body_names_in_order(...)
     |      print_body_names_in_order(self: raisimpy.ArticulatedSystem) -> None
     |      
     |      Print the moving bodies in the order. Fixed bodies are optimized out.
     |  
     |  print_frame_names_in_order(...)
     |      print_frame_names_in_order(self: raisimpy.ArticulatedSystem) -> None
     |      
     |      Print the frames (that are attached to every joint coordinate) in the order.
     |  
     |  set_actuation_limits(...)
     |      set_actuation_limits(self: raisimpy.ArticulatedSystem, upper: numpy.ndarray[float64[m, 1]], lower: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |      Set the upper and lower limits in actuation forces.
     |      
     |      Args:
     |          upper (np.array[float[n]]): upper limits.
     |          lower (np.array[float[n]]): lower limits.
     |  
     |  set_base_orientation(...)
     |      set_base_orientation(self: raisimpy.ArticulatedSystem, orientation: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the base orientation.
     |      
     |      Args:
     |          orientation (np.array[float[3]], np.array[float[4]], np.array[float[3,3]]): new base orientation.
     |  
     |  set_base_position(...)
     |      set_base_position(self: raisimpy.ArticulatedSystem, position: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the base position.
     |      
     |      Args:
     |          position (np.array[float[3]]): new base position.
     |  
     |  set_collision_object_position_offset(...)
     |      set_collision_object_position_offset(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_collision_object_position_offset(self: raisimpy.ArticulatedSystem, id_: int, position: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the collision object position offset.
     |      
     |                  Args:
     |                      id_ (int): collision object id.
     |                      position (np.array[float[3]]): position offset.
     |                  
     |      
     |      2. set_collision_object_position_offset(self: raisimpy.ArticulatedSystem, id_: int, orientation: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the collision object orientation offset.
     |      
     |                  Args:
     |                      id_ (int): collision object id.
     |                      orientation (np.array[float[3]], np.array[float[4]], np.array[float[3,3]]): orientation offset.
     |  
     |  set_collision_object_shape_parameters(...)
     |      set_collision_object_shape_parameters(self: raisimpy.ArticulatedSystem, id_: int, parameters: List[float]) -> None
     |      
     |      
     |      Set the collision object shape parameters.
     |      
     |      Args:
     |          id_ (int): collision object id.
     |          parameters (list[float]): parameters.
     |  
     |  set_control_mode(...)
     |      set_control_mode(self: raisimpy.ArticulatedSystem, mode: raisimpy.ControlMode) -> None
     |      
     |      
     |      Set the control mode.
     |      
     |      Args:
     |          mode (ControlMode.Type): control mode type, select between {FORCE_AND_TORQUE, PD_PLUS_FEEDFORWARD_TORQUE,
     |              VELOCITY_PLUS_FEEDFORWARD_TORQUE}
     |  
     |  set_external_force(...)
     |      set_external_force(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_external_force(self: raisimpy.ArticulatedSystem, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the external force on the body.
     |      
     |                  Args:
     |                      local_idx (int): local/link index.
     |                      force (np.array[float[3]]): force vector.
     |                  
     |      
     |      2. set_external_force(self: raisimpy.ArticulatedSystem, local_idx: int, force_frame: raisimpy.ArticulatedSystem.Frame, force: numpy.ndarray[float64], pos_frame: raisimpy.ArticulatedSystem.Frame, position: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the external force on the specified point on the body.
     |      
     |                  Args:
     |                      local_idx (int): local/link index.
     |                      force_frame (Frame): frame in which the force vector is expressed in, select between {WORLD_FRAME,
     |                          BODY_FRAME, PARENT_FRAME}.
     |                      force (np.array[float[3]]): force vector.
     |                      pos_frame (Frame): frame in which the position vector is expressed in, select between {WORLD_FRAME,
     |                          BODY_FRAME, PARENT_FRAME}.
     |                      position (np.array[float[3]]): position vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.ArticulatedSystem, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local/link index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_generalized_coordinates(...)
     |      set_generalized_coordinates(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_generalized_coordinates(self: raisimpy.ArticulatedSystem, coordinates: std::initializer_list<double>) -> None
     |      
     |      
     |              Set the generalized coordinates.
     |      
     |              Args:
     |                  coordinates (list[float]): generalized coordinates to set.
     |              
     |      
     |      2. set_generalized_coordinates(self: raisimpy.ArticulatedSystem, coordinates: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |              Set the generalized coordinates.
     |      
     |              Args:
     |                  coordinates (np.array[float[n]]): generalized coordinates to set.
     |  
     |  set_generalized_forces(...)
     |      set_generalized_forces(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_generalized_forces(self: raisimpy.ArticulatedSystem, forces: std::initializer_list<double>) -> None
     |      
     |      
     |              Set the generalized forces.
     |      
     |              These are the feedforward generalized forces. In the PD control mode, this differs from the actual
     |              generalizedForces. The dimension should be the same as the number of DoFs.
     |      
     |              Args:
     |                  forces (list[float]): generalized forces to set.
     |              
     |      
     |      2. set_generalized_forces(self: raisimpy.ArticulatedSystem, forces: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |              Set the generalized forces.
     |      
     |              These are the feedforward generalized forces. In the PD control mode, this differs from the actual
     |              generalizedForces. The dimension should be the same as the number of DoFs.
     |      
     |              Args:
     |                  forces (np.array[float[n]]): generalized forces to set.
     |  
     |  set_generalized_velocities(...)
     |      set_generalized_velocities(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_generalized_velocities(self: raisimpy.ArticulatedSystem, velocities: std::initializer_list<double>) -> None
     |      
     |      
     |              Set the generalized velocities.
     |      
     |              Args:
     |                  velocities (list[float]): generalized velocities to set.
     |              
     |      
     |      2. set_generalized_velocities(self: raisimpy.ArticulatedSystem, velocities: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |              Set the generalized velocities.
     |      
     |              Args:
     |                  velocities (np.array[float[n]]): generalized velocities to set.
     |  
     |  set_inertias(...)
     |      set_inertias(self: raisimpy.ArticulatedSystem, inertias: list) -> None
     |      
     |      
     |      Set the inertias (one for each body).
     |      
     |      Args:
     |          inertias (list[np.array[float[3,3]]]): body inertias.
     |  
     |  set_joint_cartesian_positions(...)
     |      set_joint_cartesian_positions(self: raisimpy.ArticulatedSystem, positions: list) -> None
     |      
     |      
     |      Set the joint Cartesian positions relative to their parent frame.
     |      
     |      Args:
     |          positions (list[np.array[float[3]]]): joint cartesian positions (relative to their parent frame).
     |  
     |  set_joint_dampings(...)
     |      set_joint_dampings(self: raisimpy.ArticulatedSystem, dampings: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |      Set the joint dampings (passive elements at the joints).
     |      
     |      Args:
     |          dampings (np.array[float[n]]): joint damping coefficients.
     |  
     |  set_link_coms(...)
     |      set_link_coms(self: raisimpy.ArticulatedSystem, coms: list) -> None
     |      
     |      
     |      Set the center of mass of each link (expressed in their body frame).
     |      
     |      Args:
     |          coms (list[np.array[float[3]]]): center of mass of each link (expressed in the body frame).
     |  
     |  set_mass(...)
     |      set_mass(self: raisimpy.ArticulatedSystem, link_idx: int, value: float) -> None
     |      
     |      
     |      Set the mass of the link.
     |      
     |      Args:
     |          link_idx (int): link index.
     |          value (float): mass value.
     |  
     |  set_masses(...)
     |      set_masses(self: raisimpy.ArticulatedSystem, masses: List[float]) -> None
     |      
     |      
     |      Set the body/link masses.
     |      
     |      Args:
     |          masses (list[double]): body masses.
     |  
     |  set_pd_gains(...)
     |      set_pd_gains(self: raisimpy.ArticulatedSystem, p_gains: numpy.ndarray[float64[m, 1]], d_gains: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |          Set the PD gains. It is effective only in the control mode 'PD_PLUS_FEEDFORWARD_TORQUE'. Set any arbitrary
     |      number for unactuated degrees of freedom.
     |      
     |          Args:
     |              p_gains (np.array[float[n]]): P gains.
     |              d_gains (np.array[float[n]]): D gains.
     |  
     |  set_pd_targets(...)
     |      set_pd_targets(self: raisimpy.ArticulatedSystem, pos_targets: numpy.ndarray[float64[m, 1]], vel_targets: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |          Set the PD targets. It is effective only in the control mode 'PD_PLUS_FEEDFORWARD_TORQUE'. Set any arbitrary
     |      number for unactuated degrees of freedom.
     |      
     |          Args:
     |              pos_targets (np.array[float[n]]): position targets.
     |              vel_targets (np.array[float[n]]): velocity targets.
     |  
     |  set_states(...)
     |      set_states(self: raisimpy.ArticulatedSystem, coordinates: numpy.ndarray[float64[m, 1]], velocities: numpy.ndarray[float64[m, 1]]) -> None
     |      
     |      
     |      Set the joint states.
     |      
     |      Args:
     |          coordinates (np.array[float[n]]): generalized coordinates to set.
     |          velocities (np.array[float[n]]): generalized velocities to set.
     |  
     |  update_kinematics(...)
     |      update_kinematics(self: raisimpy.ArticulatedSystem) -> None
     |      
     |      
     |      Update the kinematics.
     |      
     |      It is unnecessary to call this function if you are simulating your system. `integrate1` calls this function.
     |      Call this function if you want to get kinematic properties but you don't want to integrate.
     |  
     |  update_mass_info(...)
     |      update_mass_info(self: raisimpy.ArticulatedSystem) -> None
     |      
     |      Update the mass information. This function must be called after we change the dynamic parameters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  inertias
     |  
     |  joint_cartesian_positions
     |  
     |  link_coms
     |  
     |  masses
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Frame = <class 'raisimpy.ArticulatedSystem.Frame'>
     |      Members:
     |      
     |      WORLD_FRAME
     |      
     |      PARENT_FRAME
     |      
     |      BODY_FRAME
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.Object, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.Object) -> raisimpy.ObjectType
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.Object, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.Object, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.Object) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ArticulatedSystemOption(pybind11_builtins.pybind11_object)
     |  Raisim Articulated System Option.
     |  
     |  Method resolution order:
     |      ArticulatedSystemOption
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  do_not_collide_with_parent
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class BodyType(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  STATIC
     |  
     |  KINEMATIC
     |  
     |  DYNAMIC
     |  
     |  Method resolution order:
     |      BodyType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ge__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __gt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.BodyType, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.BodyType) -> int
     |  
     |  __le__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __lt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.BodyType, arg0: int) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  DYNAMIC = BodyType.DYNAMIC
     |  
     |  KINEMATIC = BodyType.KINEMATIC
     |  
     |  STATIC = BodyType.STATIC
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Box(SingleBodyObject)
     |  Raisim Box.
     |  
     |  Method resolution order:
     |      Box
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.Box, x: float, y: float, z: float, mass: float) -> None
     |      
     |      Initialize a box.
     |      
     |      Args:
     |          x (float): length along the x axis.
     |          y (float): length along the y axis.
     |          z (float): length along the z axis.
     |          mass (float): mass of the box.
     |  
     |  get_dimensions(...)
     |      get_dimensions(self: raisimpy.Box) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the box's dimensions.
     |      
     |      Returns:
     |          tuple[float[3]]: dimensions along each axis.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CameraMan(pybind11_builtins.pybind11_object)
     |  Raisim CameraMan
     |  
     |  Method resolution order:
     |      CameraMan
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_camera(...)
     |      get_camera(self: raisimpy.CameraMan) -> raisimpy.ogre.SceneNode
     |      
     |      
     |      Get the camera scene node.
     |      
     |      Returns:
     |          Ogre.SceneNode: camera scene node.
     |  
     |  get_style(...)
     |      get_style(self: raisimpy.CameraMan) -> raisimpy.CameraStyle
     |      
     |      
     |      Get the camera style.
     |      
     |      Returns:
     |          CameraStyle: camera style between {CS_FREELOOK, CS_ORBIT, CS_MANUAL}.
     |  
     |  get_target(...)
     |      get_target(self: raisimpy.CameraMan) -> raisimpy.ogre.SceneNode
     |      
     |      
     |      Get the target scene node that we revolve around. Only applies for orbit style.
     |      
     |      Returns:
     |          Ogre.SceneNode: target scene node.
     |  
     |  get_top_speed(...)
     |      get_top_speed(self: raisimpy.CameraMan) -> float
     |      
     |      
     |      Get the camera top speed (only valid in the free-look style).
     |      
     |      Returns:
     |          float: camera top speed.
     |  
     |  manual_stop(...)
     |      manual_stop(self: raisimpy.CameraMan) -> None
     |      
     |      Manually stops the camera when in free-look mode.
     |  
     |  set_camera(...)
     |      set_camera(self: raisimpy.CameraMan, camera: raisimpy.ogre.SceneNode) -> None
     |      
     |      
     |      Set the camera scene node; i.e. swaps the camera on our camera man for another camera.
     |      
     |      Args:
     |          camera (Ogre.SceneNode): camera scene node.
     |  
     |  set_fixed_yaw(...)
     |      set_fixed_yaw(self: raisimpy.CameraMan, fixed: bool) -> None
     |      
     |      
     |      Fix the yaw axis to be Vector3::UNIT_Y of the parent node (tabletop mode) otherwise the yaw axis can
     |      change freely.
     |      
     |      Args:
     |          fixed (bool): if we should fix or not the yaw axis.
     |  
     |  set_pivot_offset(...)
     |      set_pivot_offset(self: raisimpy.CameraMan, offset: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the pivot offset.
     |      
     |      Args:
     |          offset (np.array[float[3]]): pivot offset.
     |  
     |  set_style(...)
     |      set_style(self: raisimpy.CameraMan, style: raisimpy.CameraStyle) -> None
     |      
     |      
     |      Set the camera style.
     |      
     |      Args:
     |          style (CameraStyle): camera style between {CS_FREELOOK, CS_ORBIT, CS_MANUAL}.
     |  
     |  set_target(...)
     |      set_target(self: raisimpy.CameraMan, target: raisimpy.ogre.SceneNode) -> None
     |      
     |      
     |      Set the target scene node; i.e. the target we will revolve around. Only applies for orbit style.
     |      
     |      Args:
     |          target (Ogre.SceneNode): target scene node.
     |  
     |  set_top_speed(...)
     |      set_top_speed(self: raisimpy.CameraMan, speed: float) -> None
     |      
     |      
     |      Set the camera's top speed.
     |      
     |      Args:
     |          speed (float): camera top seed.
     |  
     |  set_yaw_pitch_dist(...)
     |      set_yaw_pitch_dist(self: raisimpy.CameraMan, yaw: float, pitch: float, dist: float, track: bool = False) -> None
     |      
     |      
     |      Sets the spatial offset from the target. Only applies for orbit style.
     |      
     |      Args:
     |          yaw (float): yaw angle in radians.
     |          pitch (float): pitch angle in radians.
     |          dist (float): distance from target.
     |          track_objects_yaw (bool): if True, tracks object yaw.
     |  
     |  update(...)
     |      update(self: raisimpy.CameraMan) -> None
     |      
     |      update.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  style
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CameraStyle(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  CS_FREELOOK
     |  
     |  CS_ORBIT
     |  
     |  CS_MANUAL
     |  
     |  Method resolution order:
     |      CameraStyle
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.CameraStyle, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.CameraStyle) -> int
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.CameraStyle, arg0: int) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CS_FREELOOK = CameraStyle.CS_FREELOOK
     |  
     |  CS_MANUAL = CameraStyle.CS_MANUAL
     |  
     |  CS_ORBIT = CameraStyle.CS_ORBIT
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Capsule(SingleBodyObject)
     |  Raisim Capsule.
     |  
     |  Method resolution order:
     |      Capsule
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.Capsule, radius: float, height: float, mass: float) -> None
     |      
     |      Initialize a capsule.
     |      
     |      Args:
     |          radius (float): radius of the capsule.
     |          height (float): height of the capsule.
     |          mass (float): mass of the capsule.
     |  
     |  get_height(...)
     |      get_height(self: raisimpy.Capsule) -> float
     |      
     |      
     |      Get the capsule's height.
     |      
     |      Returns:
     |          float: height of the capsule.
     |  
     |  get_radius(...)
     |      get_radius(self: raisimpy.Capsule) -> float
     |      
     |      
     |      Get the capsule's radius.
     |      
     |      Returns:
     |          float: radius of the capsule.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CollisionDefinition(pybind11_builtins.pybind11_object)
     |  Raisim CollisionDefinition struct.
     |  
     |  Method resolution order:
     |      CollisionDefinition
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.CollisionDefinition, rot_offset: numpy.ndarray[float64], pos_offset: numpy.ndarray[float64], local_idx: int, collision_object: dxGeom, name: str) -> None
     |      
     |      
     |      Instantiate the Collision Definition class.
     |      
     |      Args:
     |          rot_offset (np.array[float[3,3]]): rotation offset matrix.
     |          pos_offset (np.array[float[3]]): position offset.
     |          local_idx (int): local index.
     |          collision_object (dGeomID): collision object.
     |          name (str): name of the collision definition.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  local_idx
     |  
     |  name
     |  
     |  pos_offset
     |  
     |  rot_offset
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Compound(SingleBodyObject)
     |  Raisim Compound bodies.
     |  
     |  Method resolution order:
     |      Compound
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.Compound, children: List[raisimpy.Compound.CompoundObjectChild], mass: float, inertia: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Initialize the Compound object.
     |      
     |      Args:
     |          children (list[CompoundObjectChild]): list of child objects.
     |          mass (float): total mass of the compound object.
     |          inertia (np.array[float[3,3]]): total inertia matrix of the compound object.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CompoundObjectChild = <class 'raisimpy.Compound.CompoundObjectChild'>
     |      Raisim Compound object child.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Cone(SingleBodyObject)
     |  Raisim Cone.
     |  
     |  Method resolution order:
     |      Cone
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_height(...)
     |      get_height(self: raisimpy.Cone) -> float
     |      
     |      
     |      Get the cone's height.
     |      
     |      Returns:
     |          float: height of the cone.
     |  
     |  get_radius(...)
     |      get_radius(self: raisimpy.Cone) -> float
     |      
     |      
     |      Get the cone's radius.
     |      
     |      Returns:
     |          float: radius of the cone.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ControlMode(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  FORCE_AND_TORQUE
     |  
     |  PD_PLUS_FEEDFORWARD_TORQUE
     |  
     |  VELOCITY_PLUS_FEEDFORWARD_TORQUE
     |  
     |  Method resolution order:
     |      ControlMode
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __and__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ge__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __gt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.ControlMode, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.ControlMode) -> int
     |  
     |  __invert__ = (...)
     |      (self: object) -> object
     |  
     |  __le__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __lt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __or__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rand__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __ror__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rxor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.ControlMode, arg0: int) -> None
     |  
     |  __xor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  FORCE_AND_TORQUE = ControlMode.FORCE_AND_TORQUE
     |  
     |  PD_PLUS_FEEDFORWARD_TORQUE = ControlMode.PD_PLUS_FEEDFORWARD_TORQUE
     |  
     |  VELOCITY_PLUS_FEEDFORWARD_TORQUE = ControlMode.VELOCITY_PLUS_FEEDFORWA...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class CoordinateFrame(pybind11_builtins.pybind11_object)
     |  Raisim Coordinate Frame class.
     |  
     |  Method resolution order:
     |      CoordinateFrame
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  is_child
     |  
     |  name
     |  
     |  orientation
     |  
     |  parent_id
     |  
     |  parent_name
     |  
     |  position
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Cylinder(SingleBodyObject)
     |  Raisim Cylinder.
     |  
     |  Method resolution order:
     |      Cylinder
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_height(...)
     |      get_height(self: raisimpy.Cylinder) -> float
     |      
     |      
     |      Get the cylinder's height.
     |      
     |      Returns:
     |          float: height of the cylinder.
     |  
     |  get_radius(...)
     |      get_radius(self: raisimpy.Cylinder) -> float
     |      
     |      
     |      Get the cylinder's radius.
     |      
     |      Returns:
     |          float: radius of the cylinder.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class GraphicObject(pybind11_builtins.pybind11_object)
     |  Graphic object represents the underlying object.
     |  
     |  Method resolution order:
     |      GraphicObject
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.GraphicObject) -> None
     |      
     |      Instantiate the Graphic Object by setting its orientation, scale, and offset position.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  group
     |  
     |  local_id
     |  
     |  mesh_name
     |  
     |  name
     |  
     |  pos_offset
     |  
     |  rotation_offset
     |  
     |  scale
     |  
     |  selectable
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Ground(SingleBodyObject)
     |  Raisim Ground.
     |  
     |  Method resolution order:
     |      Ground
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.Ground, height: float) -> None
     |      
     |      Initialize a ground instance.
     |      
     |      Args:
     |          height (float): height of the ground.
     |  
     |  get_height(...)
     |      get_height(self: raisimpy.Ground) -> float
     |      
     |      
     |      Get the ground's height.
     |      
     |      Returns:
     |          float: height of the ground.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class GyroscopicMode(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  IMPLICIT_GYROSCOPIC_FORCE_BODY
     |  
     |  IMPLICIT_GYROSCOPIC_FORCE_WORLD
     |  
     |  EXPLICIT_GYROSCOPIC_FORCE
     |  
     |  NO_GYROSCOPIC_FORCE
     |  
     |  Method resolution order:
     |      GyroscopicMode
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __and__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ge__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __gt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.GyroscopicMode, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.GyroscopicMode) -> int
     |  
     |  __invert__ = (...)
     |      (self: object) -> object
     |  
     |  __le__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __lt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __or__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rand__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __ror__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rxor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.GyroscopicMode, arg0: int) -> None
     |  
     |  __xor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  EXPLICIT_GYROSCOPIC_FORCE = GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE
     |  
     |  IMPLICIT_GYROSCOPIC_FORCE_BODY = GyroscopicMode.IMPLICIT_GYROSCOPIC_FO...
     |  
     |  IMPLICIT_GYROSCOPIC_FORCE_WORLD = GyroscopicMode.IMPLICIT_GYROSCOPIC_F...
     |  
     |  NO_GYROSCOPIC_FORCE = GyroscopicMode.NO_GYROSCOPIC_FORCE
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class HeightMap(SingleBodyObject)
     |  Raisim HeightMap.
     |  
     |  Method resolution order:
     |      HeightMap
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.HeightMap, x_center: float, y_center: float, filename: str) -> None
     |      
     |      Initialize a HeightMap instance.
     |      
     |      Args:
     |          x_center (float): the x center of the heightmap in the world.
     |          y_center (float): the y center of the heightmap in the world.
     |          filename (str): raisim heightmap filename.
     |      
     |      2. __init__(self: raisimpy.HeightMap, x_center: float, y_center: float, filename: str, x_size: float, y_size: float, height_scale: float, height_offset: float) -> None
     |      
     |      Initialize a HeightMap instance.
     |      
     |      Args:
     |          x_center (float): the x center of the heightmap in the world.
     |          y_center (float): the y center of the heightmap in the world.
     |          filename (str): filename to the PNG.
     |          x_size (float): the size in the x direction.
     |          y_size (float): the size in the y direction.
     |          height_scale (float): the height scale.
     |          height_offset (float): the height offset.
     |      
     |      3. __init__(self: raisimpy.HeightMap, x_samples: int, y_samples: int, x_scale: float, y_scale: float, x_center: float, y_center: float, heights: List[float]) -> None
     |      
     |      Initialize a HeightMap instance.
     |      
     |      Args:
     |          x_samples (int): the number of samples in x.
     |          y_samples (int): the number of samples in y.
     |          x_scale (float): the scale in the x direction.
     |          y_scale (float): the scale in the y direction.
     |          x_center (float): the x center of the heightmap in the world.
     |          y_center (float): the y center of the heightmap in the world.
     |          heights (list[float]): list of desired heights.
     |      
     |      4. __init__(self: raisimpy.HeightMap, x_center: float, y_center: float, terrain_properties: raisimpy.TerrainProperties) -> None
     |      
     |      Initialize a HeightMap instance.
     |      
     |      Args:
     |          x_center (float): the x center of the heightmap in the world.
     |          y_center (float): the y center of the heightmap in the world.
     |          terrain_properties (TerrainProperties): the terrain properties.
     |  
     |  destroy_collision_bodies(...)
     |      destroy_collision_bodies(self: raisimpy.HeightMap, id_: dxSpace) -> None
     |      
     |      
     |      Destroy the collision bodies of the specified collision space.
     |      
     |      Args:
     |      id_ (dSpaceID): collision space id.
     |  
     |  get_height(...)
     |      get_height(self: raisimpy.HeightMap, x: float, y: float) -> float
     |      
     |      
     |      Get the height at the given location.
     |      
     |      Args:
     |      x (float): x position.
     |      y (float): y position.
     |  
     |  get_height_vector(...)
     |      get_height_vector(self: raisimpy.HeightMap) -> List[float]
     |      
     |      
     |      Get the height vector.
     |      
     |      Returns:
     |      list[float]: the height vector.
     |  
     |  get_x_center(...)
     |      get_x_center(self: raisimpy.HeightMap) -> float
     |      
     |      
     |      Get the x center.
     |      
     |      Returns:
     |      float: the x center.
     |  
     |  get_x_samples(...)
     |      get_x_samples(self: raisimpy.HeightMap) -> int
     |      
     |      
     |      Get the x samples.
     |      
     |      Returns:
     |      int: the number of x samples.
     |  
     |  get_x_size(...)
     |      get_x_size(self: raisimpy.HeightMap) -> float
     |      
     |      
     |      Get the x size.
     |      
     |      Returns:
     |      float: the size in x.
     |  
     |  get_y_center(...)
     |      get_y_center(self: raisimpy.HeightMap) -> float
     |      
     |      
     |      Get the y center.
     |      
     |      Returns:
     |      float: the y center.
     |  
     |  get_y_samples(...)
     |      get_y_samples(self: raisimpy.HeightMap) -> int
     |      
     |      
     |      Get the y samples.
     |      
     |      Returns:
     |      int: the number of y samples.
     |  
     |  get_y_size(...)
     |      get_y_size(self: raisimpy.HeightMap) -> float
     |      
     |      
     |      Get the y size.
     |      
     |      Returns:
     |      float: the size in y.
     |  
     |  init(...)
     |      init(self: raisimpy.HeightMap, x_samples: int, y_samples: int, x_scale: float, y_scale: float, x_center: float, y_center: float) -> None
     |      
     |      
     |      Initialize the heightmap.
     |      
     |      Args:
     |          x_samples (int): the number of samples in x.
     |          y_samples (int): the number of samples in y.
     |      x_scale (float): the scale in the x direction.
     |      y_scale (float): the scale in the y direction.
     |      x_center (float): the x center of the heightmap in the world.
     |      y_center (float): the y center of the heightmap in the world.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class MaterialManager(pybind11_builtins.pybind11_object)
     |  Raisim Material Manager.
     |  
     |  Method resolution order:
     |      MaterialManager
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.MaterialManager) -> None
     |      
     |      Initialize the material pair manager.
     |      
     |      2. __init__(self: raisimpy.MaterialManager, xml_file: str) -> None
     |      
     |      Initialize the material manager by uploading the material data from a file.
     |      
     |      Args:
     |          xml_file (float): xml file.
     |  
     |  get_material_pair_properties(...)
     |      get_material_pair_properties(self: raisimpy.MaterialManager, material1: str, material2: str) -> raisimpy.MaterialPairProperties
     |      
     |      
     |      Get the material pair properties (friction and restitution).
     |      
     |      Args:
     |          material1 (str): first material.
     |          material2 (str): second material.
     |      
     |      Returns:
     |          MaterialPairProperties: material pair properties (friction, restitution, and restitution threshold).
     |  
     |  set_default_material_properties(...)
     |      set_default_material_properties(self: raisimpy.MaterialManager, friction: float, restitution: float, threshold: float) -> None
     |      
     |      
     |      Set the default material properties.
     |      
     |      Args:
     |          friction (float): coefficient of friction.
     |          restitution (float): coefficient of restitution.
     |          threshold (float): restitution threshold.
     |  
     |  set_material_pair_properties(...)
     |      set_material_pair_properties(self: raisimpy.MaterialManager, material1: str, material2: str, friction: float, restitution: float, threshold: float) -> None
     |      
     |      
     |      Set the material pair properties (friction and restitution).
     |      
     |      Args:
     |          material1 (str): first material.
     |          material2 (str): second material.
     |          friction (float): coefficient of friction.
     |          restitution (float): coefficient of restitution.
     |          threshold (float): restitution threshold.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class MaterialPairProperties(pybind11_builtins.pybind11_object)
     |  Raisim Material Pair Properties (friction and restitution).
     |  
     |  Method resolution order:
     |      MaterialPairProperties
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.MaterialPairProperties) -> None
     |      
     |      Initialize the material pair properties.
     |      
     |      2. __init__(self: raisimpy.MaterialPairProperties, friction: float, restitution: float, threshold: float) -> None
     |      
     |      Initialize the material pair properties.
     |      
     |      Args:
     |          friction (float): coefficient of friction.
     |          restitution (float): coefficient of restitution.
     |          threshold (float): restitution threshold.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Mesh(SingleBodyObject)
     |  Raisim Mesh.
     |  
     |  Method resolution order:
     |      Mesh
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_file_name(...)
     |      get_file_name(self: raisimpy.Mesh) -> str
     |      
     |      
     |      Get the mesh's full path.
     |      
     |      Returns:
     |          float: full path of the mesh file.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Object(pybind11_builtins.pybind11_object)
     |  Raisim Object from which all other objects/bodies inherit from.
     |  
     |  Method resolution order:
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.Object, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.Object, local_idx: int) -> float
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.Object) -> raisimpy.ObjectType
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.Object, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.Object, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.Object, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.Object, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.Object, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.Object) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ObjectType(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  SPHERE
     |  
     |  BOX
     |  
     |  CYLINDER
     |  
     |  CONE
     |  
     |  CAPSULE
     |  
     |  MESH
     |  
     |  HALFSPACE
     |  
     |  COMPOUND
     |  
     |  HEIGHTMAP
     |  
     |  ARTICULATED_SYSTEM
     |  
     |  Method resolution order:
     |      ObjectType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __and__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ge__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __gt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.ObjectType, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.ObjectType) -> int
     |  
     |  __invert__ = (...)
     |      (self: object) -> object
     |  
     |  __le__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __lt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __or__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rand__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __ror__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rxor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.ObjectType, arg0: int) -> None
     |  
     |  __xor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ARTICULATED_SYSTEM = ObjectType.ARTICULATED_SYSTEM
     |  
     |  BOX = ObjectType.BOX
     |  
     |  CAPSULE = ObjectType.CAPSULE
     |  
     |  COMPOUND = ObjectType.COMPOUND
     |  
     |  CONE = ObjectType.CONE
     |  
     |  CYLINDER = ObjectType.CYLINDER
     |  
     |  HALFSPACE = ObjectType.HALFSPACE
     |  
     |  HEIGHTMAP = ObjectType.HEIGHTMAP
     |  
     |  MESH = ObjectType.MESH
     |  
     |  SPHERE = ObjectType.SPHERE
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class OgreVis(pybind11_builtins.pybind11_object)
     |  Raisim Ogre visualizer.
     |  
     |  Method resolution order:
     |      OgreVis
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.OgreVis) -> None
     |      
     |      Initialize the visualizer.
     |      
     |      2. __init__(self: raisimpy.OgreVis, world: raisimpy.World, width: int = 1280, height: int = 720, fps: float = 60, anti_aliasing: int = 2) -> None
     |      
     |      
     |                  Instantiate the visualizer for the given world.
     |      
     |                  Args:
     |                      world (World): world instance.
     |                      width (int): width of the window.
     |                      height (int): height of the window.
     |                      fps (double): the number of frames per second.
     |                      anti_aliasing (int): anti aliasing.
     |  
     |  add_resource_directory(...)
     |      add_resource_directory(self: raisimpy.OgreVis, dir: str) -> None
     |      
     |      
     |      Add resource directory for materials
     |      
     |      Args:
     |          dir (str): resource directory path.
     |  
     |  add_visual_object(...)
     |      add_visual_object(self: raisimpy.OgreVis, name: str, mesh_name: str, material: str, scale: numpy.ndarray[float64], cast_shadow: bool = True, group: int = 3) -> None
     |      
     |      
     |      Add a visual object.
     |      
     |      Args:
     |          name (str): name of the visual object.
     |          mesh_name (str): name of the material.
     |          material (str): material.
     |          scale (np.array[float[3]]): scale.
     |          cast_shadow (bool): if we should cast shadow or not.
     |          group (unsigned long int): group. You can select between {RAISIM_OBJECT_GROUP, RAISIM_COLLISION_BODY_GROUP,
     |              RAISIM_CONTACT_POINT_GROUP, RAISIM_CONTACT_FORCE_GROUP}, or any combination using bit operations.
     |  
     |  build_height_map(...)
     |      build_height_map(self: raisimpy.OgreVis, name: str, x_samples: int, x_size: float, x_center: float, y_samples: int, y_size: float, y_center: float, height: List[float]) -> None
     |      
     |      
     |      Build the heigthmap.
     |      
     |      Args:
     |          name (str): the heightmap name.
     |          x_samples (int): the number of samples in x.
     |          x_size (float): the size in the x direction.
     |          x_center (float): the x center of the heightmap in the world.
     |          y_samples (int): the number of samples in y.
     |          y_size (float): the size in the y direction.
     |          y_center (float): the y center of the heightmap in the world.
     |          height (list[float]): list of desired heights.
     |  
     |  clear_visual_object(...)
     |      clear_visual_object(self: raisimpy.OgreVis) -> None
     |      
     |      Clear all the visual objects.
     |  
     |  close_app(...)
     |      close_app(self: raisimpy.OgreVis) -> None
     |      
     |      This function closes down the application - saves the configuration then shutdowns.
     |  
     |  create_graphical_object(...)
     |      create_graphical_object(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. create_graphical_object(self: raisimpy.OgreVis, sphere: raisimpy.Sphere, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a sphere in the window.
     |      
     |                  Args:
     |                      sphere (Sphere): Raisim sphere instance.
     |                      name (str): name of the sphere.
     |                      material (str): material for visualization.
     |                  
     |      
     |      2. create_graphical_object(self: raisimpy.OgreVis, ground: raisimpy.Ground, dimension: float, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a ground in the window.
     |      
     |                  Args:
     |                      ground (Ground): Raisim ground instance.
     |                      dimension (double): the plane dimension.
     |                      name (str): name of the ground.
     |                      material (str): material for visualization.
     |                  
     |      
     |      3. create_graphical_object(self: raisimpy.OgreVis, box: raisimpy.Box, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a box in the window.
     |      
     |                  Args:
     |                      box (Box): Raisim box instance.
     |                      name (str): name of the box.
     |                      material (str): material for visualization.
     |                  
     |      
     |      4. create_graphical_object(self: raisimpy.OgreVis, cylinder: raisimpy.Cylinder, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a cylinder in the window.
     |      
     |                  Args:
     |                      cylinder (Cylinder): Raisim cylinder instance.
     |                      name (str): name of the cylinder.
     |                      material (str): material for visualization.
     |                  
     |      
     |      5. create_graphical_object(self: raisimpy.OgreVis, wire: raisimpy.constraints.Wire, name: str, material: str = 'default') -> raisimpy.VisualObject
     |      
     |      
     |                  Add a wire in the window.
     |      
     |                  Args:
     |                      wire (Wire): Raisim wire instance.
     |                      name (str): name of the wire.
     |                      material (str): material for visualization.
     |                  
     |      
     |      6. create_graphical_object(self: raisimpy.OgreVis, capsule: raisimpy.Capsule, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a capsule in the window.
     |      
     |                  Args:
     |                      capsule (Capsule): Raisim capsule instance.
     |                      name (str): name of the capsule.
     |                      material (str): material for visualization.
     |                  
     |      
     |      7. create_graphical_object(self: raisimpy.OgreVis, articulated_system: raisimpy.ArticulatedSystem, name: str) -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add an articulated system in the window.
     |      
     |                  Args:
     |                      articulated_system (ArticulatedSystem): Raisim articulated system instance.
     |                      name (str): name of the articulated system.
     |                  
     |      
     |      8. create_graphical_object(self: raisimpy.OgreVis, capsule: raisimpy.HeightMap, name: str, material: str = 'default', down_sample: int = 1) -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a heightmap in the window.
     |      
     |                  Args:
     |                      heightmap (HeightMap): Raisim heightmap instance.
     |                      name (str): name of the heightmap.
     |                      material (str): material for visualization.
     |                  
     |      
     |      9. create_graphical_object(self: raisimpy.OgreVis, mesh: raisimpy.Mesh, name: str, material: str = 'default') -> List[raisimpy.GraphicObject]
     |      
     |      
     |                  Add a mesh in the window.
     |      
     |                  Args:
     |                      mesh (Mesh): Raisim mesh instance.
     |                      name (str): name of the mesh.
     |                      material (str): material for visualization.
     |  
     |  deselect(...)
     |      deselect(self: raisimpy.OgreVis) -> None
     |      
     |      Deselect the current selected object.
     |  
     |  get_camera_man(...)
     |      get_camera_man(self: raisimpy.OgreVis) -> raisimpy.CameraMan
     |      
     |      
     |      Return the camera man instance attached to the visualizer.
     |      
     |      Returns:
     |          raisim.visualizer.CameraMan: camera man instance.
     |  
     |  get_light(...)
     |      get_light(self: raisimpy.OgreVis, index: str = 'default') -> raisimpy.ogre.Light
     |      
     |      
     |      Return the default light that can be adjusted.
     |      
     |      Returns:
     |          Light: Light instance.
     |  
     |  get_light_node(...)
     |      get_light_node(self: raisimpy.OgreVis, index: str = 'default') -> raisimpy.ogre.SceneNode
     |      
     |      
     |      Get LightNode for moving the main light around.
     |      
     |      Returns:
     |          SceneNode: Light node instance.
     |  
     |  get_paused(...)
     |      get_paused(self: raisimpy.OgreVis) -> bool
     |      
     |      
     |      Return if the visualizer is paused or not.
     |      
     |      Returns:
     |          bool: True if the visualizer is paused.
     |  
     |  get_real_time_factor_reference(...)
     |      get_real_time_factor_reference(self: raisimpy.OgreVis) -> float
     |      
     |      
     |      Get the real time factor reference.
     |      
     |      Returns:
     |          float: real time factor reference.
     |  
     |  get_resource_dir(...)
     |      get_resource_dir(self: raisimpy.OgreVis) -> str
     |      
     |      
     |      Get resource directory of RaisimOgreVisualizer
     |      
     |      Returns:
     |          str: resource directory path.
     |  
     |  get_scene_manager(...)
     |      get_scene_manager(self: raisimpy.OgreVis) -> raisimpy.ogre.SceneManager
     |      
     |      
     |      Get the Ogre::SceneManager owned by this class.
     |      
     |      Returns:
     |          Ogre.SceneManager: the scene manager.
     |  
     |  get_selected(...)
     |      get_selected(self: raisimpy.OgreVis) -> Tuple[raisimpy.Object, int]
     |      
     |      
     |      Return the current selected item.
     |      
     |      Returns:
     |          Object: Raisim object instance.
     |          int: index.
     |  
     |  get_selected_graphical_object(...)
     |      get_selected_graphical_object(self: raisimpy.OgreVis) -> raisimpy.GraphicObject
     |      
     |      
     |      Return the current selected graphical object item.
     |      
     |      Returns:
     |          GraphicObject: Raisim graphic object instance.
     |  
     |  get_take_n_steps(...)
     |      get_take_n_steps(self: raisimpy.OgreVis) -> int
     |      
     |      
     |      Get take N steps.
     |      
     |      Returns:
     |          int: num of steps.
     |  
     |  get_view_port(...)
     |      get_view_port(self: raisimpy.OgreVis) -> raisimpy.ogre.Viewport
     |      
     |      
     |      Get main Ogre::Viewport.
     |      
     |      Note: 'A viewport is the meeting of a camera and a rendering surface - the camera renders the scene from a
     |      viewpoint, and places its results into some subset of a rendering target, which may be the whole surface or
     |      just a part of the surface. Each viewport has a single camera as source and a single target as destination.
     |      A camera only has 1 viewport, but a render target may have several. A viewport also has a Z-order, i.e. if
     |      there is more than one viewport on a single render target and they overlap, one must obscure the other in
     |      some predetermined way.' [1]
     |      
     |      Returns:
     |          Viewport: the viewport.
     |      
     |      References:
     |          - [1] Ogre::Viewport class reference: https://www.ogre3d.org/docs/api/1.8/class_ogre_1_1_viewport.html
     |  
     |  get_visual_object_list(...)
     |      get_visual_object_list(self: raisimpy.OgreVis) -> Dict[str, raisimpy.VisualObject]
     |      
     |      
     |      Return the list of visual objects.
     |      
     |      Returns:
     |          dict[str:VisualObject]: dictionary mapping names to visual objects.
     |  
     |  get_world(...)
     |      get_world(self: raisimpy.OgreVis) -> raisimpy.World
     |      
     |      
     |      Return the world instance attached to the visualizer.
     |      
     |      Returns:
     |          World: world instance.
     |  
     |  init_app(...)
     |      init_app(self: raisimpy.OgreVis) -> None
     |      
     |      
     |      This calls `initApp`. Note that you have to configure it before calling it, by setting the world, window
     |      size, the various callbacks, and the anti-aliasing.
     |  
     |  is_recording(...)
     |      is_recording(self: raisimpy.OgreVis) -> bool
     |      
     |      
     |      Return if the visualizer is recording or not.
     |      
     |      Returns:
     |          bool: True if the visualizer is recording.
     |  
     |  load_material(...)
     |      load_material(self: raisimpy.OgreVis, filename: str) -> None
     |      
     |      
     |      Once the directory is added (using `add_resource_dir`), load the material file in the directory.
     |      
     |      Args:
     |          filename (str): material filename.
     |  
     |  load_mesh(...)
     |      load_mesh(self: raisimpy.OgreVis, filename: str, name: str, from_memory: bool = False) -> None
     |      
     |      
     |      Loading mesh file using assimp. Ogre only reads .mesh file. If it something else is given, it creates
     |      .mesh file inside the directory. file can be the whole path to the meshfile, or from the memory.
     |      
     |      Args:
     |          filename (str): mesh filename.
     |          name (str): mesh name.
     |          from_memory (bool): if we should load it from memory.
     |  
     |  remote_run(...)
     |      remote_run(self: raisimpy.OgreVis) -> None
     |      
     |      Run in remote mode.
     |  
     |  remove(...)
     |      remove(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. remove(self: raisimpy.OgreVis, obj: raisimpy.Object) -> None
     |      
     |      
     |              Remove an object from the visualizer.
     |      
     |              Args:
     |                  obj (Object): Raisim object instance to be removed.
     |              
     |      
     |      2. remove(self: raisimpy.OgreVis, name: str) -> None
     |      
     |      
     |              Remove an object from the visualizer.
     |      
     |              Args:
     |                  name (str): name of the object to be removed.
     |  
     |  render_one_frame(...)
     |      render_one_frame(self: raisimpy.OgreVis) -> None
     |      
     |      renders a single frame without updating simulation.
     |  
     |  run(...)
     |      run(self: raisimpy.OgreVis) -> None
     |      
     |      run simulation and visualization.
     |  
     |  select(...)
     |      select(self: raisimpy.OgreVis, obj: raisimpy.GraphicObject, highlight: bool = True) -> None
     |      
     |      
     |      Select the given graphic object item.
     |      
     |      Args:
     |          obj (GraphicObject): Raisim graphic object instance.
     |          highlight (bool): if we should highlight the graphical object in the visualizer.
     |  
     |  set_anti_aliasing(...)
     |      set_anti_aliasing(self: raisimpy.OgreVis, fsaa: int) -> None
     |      
     |      
     |      Set the anti-aliasing.
     |      
     |      Args:
     |          fsaa (int): frame anti-aliasing; fsaa should be set to one of (1,2,4,8).
     |  
     |  set_camera_speed(...)
     |      set_camera_speed(self: raisimpy.OgreVis, speed: float) -> None
     |      
     |      
     |      Set camera speed.
     |      
     |      Args:
     |          speed (float): camera speed (for free motion).
     |  
     |  set_contact_visual_object_size(...)
     |      set_contact_visual_object_size(self: raisimpy.OgreVis, point_size: float, force_arrow_length: float) -> None
     |      
     |      
     |      Set the contact visual object sizes (for contact points and contact force arrows).
     |      
     |      Args:
     |          point_size (float): point size.
     |          force_arrow_length (float): force size corresponding to the maximum impulse.
     |  
     |  set_control_callback(...)
     |      set_control_callback(self: raisimpy.OgreVis, callback: Callable[[], None]) -> None
     |      
     |      
     |      Set control callback.
     |      
     |      Args:
     |          callback (callable): callable void function.
     |  
     |  set_default_callbacks(...)
     |      set_default_callbacks(self: raisimpy.OgreVis) -> None
     |      
     |      
     |      This sets the default callbacks (imguiSetupCallback, imguiRenderCallBack, raisimKeyboardCallback, setupCallback).
     |  
     |  set_desired_fps(...)
     |      set_desired_fps(self: raisimpy.OgreVis, fps: float) -> None
     |      
     |      
     |      Set the desired frame per second.
     |      
     |      Args:
     |          fps (double): frame per second.
     |  
     |  set_imgui_render_callback(...)
     |      set_imgui_render_callback(self: raisimpy.OgreVis, callback: Callable[[], None]) -> None
     |      
     |      
     |      Set imgui render callback. This callback is called for every frame.
     |      
     |      Args:
     |          callback (callable): callable void function.
     |  
     |  set_imgui_setup_callback(...)
     |      set_imgui_setup_callback(self: raisimpy.OgreVis, callback: Callable[[], None]) -> None
     |      
     |      
     |      Set imgui setup callback. This callback is called only once in setup.
     |      
     |      Args:
     |          callback (callable): callable void function.
     |  
     |  set_keyboard_callback(...)
     |      set_keyboard_callback(self: raisimpy.OgreVis, callback: Callable[[raisimpy.ogre.KeyboardEvent], bool]) -> None
     |      
     |      
     |      Set keyboard callback. This callback is called for every keyboard event.
     |      
     |      Args:
     |          callback (callable): callable function which accepts as input the KeyboardEvent.
     |  
     |  set_remote_mode(...)
     |      set_remote_mode(self: raisimpy.OgreVis, mode: bool) -> None
     |      
     |      
     |      Set the remote mode.
     |      
     |      Args:
     |          mode (bool): True if we are in a remote mode.
     |  
     |  set_setup_callback(...)
     |      set_setup_callback(self: raisimpy.OgreVis, callback: Callable[[], None]) -> None
     |      
     |      
     |      Set set up callbacks; load custom meshes, materials, anything necessary for setup.
     |      
     |      Args:
     |          callback (callable): callable void function.
     |  
     |  set_visibility_mask(...)
     |      set_visibility_mask(self: raisimpy.OgreVis, mask: int) -> None
     |      
     |      
     |      Set the visibility mask.
     |      
     |      Args:
     |          mask (unsigned long int): mask (it is a bitfield).
     |  
     |  set_window_size(...)
     |      set_window_size(self: raisimpy.OgreVis, width: int, height: int) -> None
     |      
     |      
     |      Set the window size.
     |      
     |      Returns:
     |          width: width of the window.
     |          height: height of the window.
     |  
     |  set_world(...)
     |      set_world(self: raisimpy.OgreVis, world: raisimpy.World) -> None
     |      
     |      
     |      Set the world instance to the visualizer.
     |      
     |      Warnings: this must be called before simulation.
     |      
     |      Args:
     |          world (World): world instance.
     |  
     |  start_recording_video(...)
     |      start_recording_video(self: raisimpy.OgreVis, filename: str) -> None
     |      
     |      
     |      Initiate a video recording session.
     |      
     |      Returns:
     |          filename (str): filename for the recorded video.
     |  
     |  start_rendering(...)
     |      start_rendering(self: raisimpy.OgreVis) -> None
     |      
     |      start rendering loop without updating simulation.
     |  
     |  stop_recording_video_and_save(...)
     |      stop_recording_video_and_save(self: raisimpy.OgreVis) -> None
     |      
     |      Stop the recording of the video and save it in the previous given filename.
     |  
     |  sync(...)
     |      sync(self: raisimpy.OgreVis) -> None
     |      
     |      Synchronize Raisim and Ogre.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  get(...) from builtins.PyCapsule
     |      get() -> raisimpy.OgreVis
     |      
     |      
     |      Return a pointer to the singleton visualizer.
     |      
     |      Returns:
     |          OgreVis: reference to this class.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  paused
     |      Return if the visualizer is paused or not.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  VisualizationGroup = <class 'raisimpy.OgreVis.VisualizationGroup'>
     |      Members:
     |      
     |      RAISIM_OBJECT_GROUP
     |      
     |      RAISIM_COLLISION_BODY_GROUP
     |      
     |      RAISIM_CONTACT_POINT_GROUP
     |      
     |      RAISIM_CONTACT_FORCE_GROUP
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ShapeType(pybind11_builtins.pybind11_object)
     |  Members:
     |  
     |  Box
     |  
     |  Cylinder
     |  
     |  Sphere
     |  
     |  Mesh
     |  
     |  Capsule
     |  
     |  Cone
     |  
     |  Method resolution order:
     |      ShapeType
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __and__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __eq__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ge__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __getstate__ = (...)
     |      (self: object) -> int_
     |  
     |  __gt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __hash__ = (...)
     |      (self: object) -> int_
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.ShapeType, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: raisimpy.ShapeType) -> int
     |  
     |  __invert__ = (...)
     |      (self: object) -> object
     |  
     |  __le__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __lt__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __ne__ = (...)
     |      (self: object, arg0: object) -> bool
     |  
     |  __or__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rand__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __repr__ = (...)
     |      (self: handle) -> str
     |  
     |  __ror__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __rxor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  __setstate__ = (...)
     |      (self: raisimpy.ShapeType, arg0: int) -> None
     |  
     |  __xor__ = (...)
     |      (self: object, arg0: object) -> object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __members__
     |  
     |  name
     |      (self: handle) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Box = ShapeType.Box
     |  
     |  Capsule = ShapeType.Capsule
     |  
     |  Cone = ShapeType.Cone
     |  
     |  Cylinder = ShapeType.Cylinder
     |  
     |  Mesh = ShapeType.Mesh
     |  
     |  Sphere = ShapeType.Sphere
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SimAndGraphicsObjectPool(pybind11_builtins.pybind11_object)
     |  Sim and graphic object pool.
     |  
     |  Method resolution order:
     |      SimAndGraphicsObjectPool
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  erase(...)
     |      erase(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. erase(self: raisimpy.SimAndGraphicsObjectPool, name: str) -> None
     |      
     |      
     |                  Erase the specified object (from its name) from the world.
     |      
     |                  Args:
     |                      name (str): object name to be removed.
     |                  
     |      
     |      2. erase(self: raisimpy.SimAndGraphicsObjectPool, name: raisimpy.Object) -> None
     |      
     |      
     |                  Erase the specified object from the world.
     |      
     |                  Args:
     |                      obj (Object): object instance.
     |  
     |  set_world(...)
     |      set_world(self: raisimpy.SimAndGraphicsObjectPool, world: raisimpy.World) -> None
     |      
     |      
     |      Set the world instance.
     |      
     |      Args:
     |          world (World): world instance.
     |  
     |  sync(...)
     |      sync(self: raisimpy.SimAndGraphicsObjectPool) -> None
     |      
     |      Synchronize: update pose of graphical objects.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class SingleBodyObject(Object)
     |  Raisim Single Object from which all single objects/bodies (such as box, sphere, etc) inherit from.
     |  
     |  Method resolution order:
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.SingleBodyObject, object_type: raisimpy.ObjectType) -> None
     |      
     |      Initialize the Object.
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Sphere(SingleBodyObject)
     |  Raisim Sphere.
     |  
     |  Method resolution order:
     |      Sphere
     |      SingleBodyObject
     |      Object
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_radius(...)
     |      get_radius(self: raisimpy.Sphere) -> float
     |      
     |      
     |      Get the sphere's radius.
     |      
     |      Returns:
     |          float: radius of the sphere.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SingleBodyObject:
     |  
     |  get_angular_velocity(...)
     |      get_angular_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's angular velocity position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: angular velocity in the world frame.
     |  
     |  get_body_inertia_matrix(...)
     |      get_body_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the body frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: body inertia matrix.
     |  
     |  get_collision_group(...)
     |      get_collision_group(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision group.
     |      
     |      Returns:
     |          int: collision group.
     |  
     |  get_collision_mask(...)
     |      get_collision_mask(self: raisimpy.SingleBodyObject) -> int
     |      
     |      
     |      Get the body's collision mask.
     |      
     |      Returns:
     |          int: collision mask.
     |  
     |  get_collision_object(...)
     |      get_collision_object(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the collision object.
     |      
     |      Returns:
     |          dGeomID: collision object.
     |  
     |  get_com_position(...)
     |      get_com_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's center of mass position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: center of mass position in the world frame.
     |  
     |  get_contact_point_velocity(...)
     |      get_contact_point_velocity(self: raisimpy.SingleBodyObject, point_id: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the contact point velocity.
     |      
     |      Args:
     |          point_id (int): point id.
     |      
     |      Returns:
     |          np.array[float[3]]: contact point velocity.
     |  
     |  get_energy(...)
     |      get_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's total energy.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: total energy.
     |  
     |  get_gyroscopic_mode(...)
     |      get_gyroscopic_mode(self: raisimpy.SingleBodyObject) -> dxGeom
     |      
     |      
     |      Get the gyroscopic mode.
     |      
     |      Returns:
     |          raisim.GyroscopicMode: gyroscopic mode (between ['IMPLICIT_GYROSCOPIC_FORCE_BODY',
     |          'IMPLICIT_GYROSCOPIC_FORCE_WORLD', 'EXPLICIT_GYROSCOPIC_FORCE', 'NO_GYROSCOPIC_FORCE'])
     |  
     |  get_kinetic_energy(...)
     |      get_kinetic_energy(self: raisimpy.SingleBodyObject) -> float
     |      
     |      
     |      Get the body's kinetic energy.
     |      
     |      Returns:
     |          float: kinetic energy.
     |  
     |  get_linear_momentum(...)
     |      get_linear_momentum(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear momentum.
     |      
     |      Returns:
     |          np.array[float[3]]: linear momentum.
     |  
     |  get_linear_velocity(...)
     |      get_linear_velocity(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's linear velocity with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity in the world frame.
     |  
     |  get_mass(...)
     |      get_mass(self: raisimpy.SingleBodyObject, local_idx: int) -> float
     |      
     |      
     |      Get the body's mass.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          float: mass (kg).
     |  
     |  get_object_type(...)
     |      get_object_type(self: raisimpy.SingleBodyObject) -> raisimpy.ObjectType
     |      
     |      
     |      Get the body's type.
     |      
     |      Returns:
     |          raisim.ObjectType: object type (BOX, CYLINDER, CAPSULE, CONE, SPHERE, etc.)
     |  
     |  get_position(...)
     |      get_position(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 1]]
     |      
     |      
     |      Get the body's position with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3]]: position in the world frame.
     |  
     |  get_potential_energy(...)
     |      get_potential_energy(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64]) -> float
     |      
     |      
     |      Get the body's potential energy due to gravity.
     |      
     |      Args:
     |          gravity (np.array[float[3]]): gravity vector.
     |      
     |      Returns:
     |          float: potential energy.
     |  
     |  get_quaternion(...)
     |      get_quaternion(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[4, 1]]
     |      
     |      
     |      Get the body's orientation (expressed as a quaternion [w,x,y,z]) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[4]]: quaternion [w,x,y,z].
     |  
     |  get_rotation_matrix(...)
     |      get_rotation_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's orientation (expressed as a rotation matrix) with respect to the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  get_world_inertia_matrix(...)
     |      get_world_inertia_matrix(self: raisimpy.SingleBodyObject) -> numpy.ndarray[float64[3, 3]]
     |      
     |      
     |      Get the body's inertia matrix expressed in the world frame.
     |      
     |      Returns:
     |          np.array[float[3,3]]: world inertia matrix.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.SingleBodyObject, dt: float) -> None
     |      
     |      integrate.
     |  
     |  pre_contact_solver_update1(...)
     |      pre_contact_solver_update1(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  pre_contact_solver_update2(...)
     |      pre_contact_solver_update2(self: raisimpy.SingleBodyObject, gravity: numpy.ndarray[float64], dt: float) -> None
     |  
     |  set_angular_damping(...)
     |      set_angular_damping(self: raisimpy.SingleBodyObject, damping: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the body's angular damping.
     |      
     |      Args:
     |          damping (np.array[float[3]]): angular damping.
     |  
     |  set_body_type(...)
     |      set_body_type(self: raisimpy.SingleBodyObject, body_type: raisimpy.BodyType) -> None
     |      
     |      
     |      Set the body's type.
     |      
     |      Args:
     |          body_type (BodyType): body type.
     |  
     |  set_external_force(...)
     |      set_external_force(self: raisimpy.SingleBodyObject, local_idx: int, force: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_external_torque(...)
     |      set_external_torque(self: raisimpy.SingleBodyObject, local_idx: int, torque: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the external force on the body.
     |      
     |      Args:
     |          local_idx (int): local index.
     |          force (np.array[float[3]]): force vector.
     |  
     |  set_gyroscopic_mode(...)
     |      set_gyroscopic_mode(self: raisimpy.SingleBodyObject, mode: raisimpy.GyroscopicMode) -> None
     |      
     |      
     |      Set the gyroscopic mode for the body.
     |      
     |      Args:
     |          mode (GyroscopicMode): gyroscopic mode (select between (between [GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_BODY,
     |              GyroscopicMode.IMPLICIT_GYROSCOPIC_FORCE_WORLD, GyroscopicMode.EXPLICIT_GYROSCOPIC_FORCE,
     |              GyroscopicMode.NO_GYROSCOPIC_FORCE])
     |  
     |  set_linear_damping(...)
     |      set_linear_damping(self: raisimpy.SingleBodyObject, damping: float) -> None
     |      
     |      
     |      Set the body's linear damping coefficient.
     |      
     |      Args:
     |          damping (float): linear damping coefficient.
     |  
     |  set_orientation(...)
     |      set_orientation(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_orientation(self: raisimpy.SingleBodyObject, w: float = 1.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      w (float): scalar component of the quaternion.
     |                      x (float): x component of the vector in the quaternion.
     |                      y (float): y component of the vector in the quaternion.
     |                      z (float): z component of the vector in the quaternion.
     |                  
     |      
     |      2. set_orientation(self: raisimpy.SingleBodyObject, rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a rotation matrix) for the body.
     |      
     |                  Args:
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      3. set_orientation(self: raisimpy.SingleBodyObject, quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified orientation (expressed as a quaternion [x,y,z,w]) for the body.
     |      
     |                  Args:
     |                      quaternion (np.array[float[4]]): quaternion [x,y,z,w].
     |  
     |  set_pose(...)
     |      set_pose(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], rotation_matrix: numpy.ndarray[float64[3, 3]]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      rotation_matrix (np.array[float[3,3]]): rotation matrix.
     |                  
     |      
     |      2. set_pose(self: raisimpy.SingleBodyObject, position: numpy.ndarray[float64[3, 1]], quaternion: numpy.ndarray[float64]) -> None
     |      
     |      
     |                  Set the specified pose for the body.
     |      
     |                  Args:
     |                      position (np.array[float[3]]): origin position vector.
     |                      quaternion (np.array[float[4]]): quaternion (expressed as [w,x,y,z]).
     |  
     |  set_position(...)
     |      set_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_position(self: raisimpy.SingleBodyObject, origin_position: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      origin_position (np.array[float[3]]): origin position.
     |                  
     |      
     |      2. set_position(self: raisimpy.SingleBodyObject, x: float, y: float, z: float) -> None
     |      
     |      
     |                  Set the specified origin position.
     |      
     |                  Args:
     |                      x (float): x component of the origin position.
     |                      y (float): y component of the origin position.
     |                      z (float): z component of the origin position.
     |  
     |  set_velocity(...)
     |      set_velocity(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. set_velocity(self: raisimpy.SingleBodyObject, linear_velocity: numpy.ndarray[float64[3, 1]], angular_velocity: numpy.ndarray[float64[3, 1]]) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      linear_velocity (np.array[float[3]]): linear velocity.
     |                      angular_velocity (np.array[float[3,3]]): angular velocity.
     |                  
     |      
     |      2. set_velocity(self: raisimpy.SingleBodyObject, dx: float, dy: float, dz: float, wx: float, wy: float, wz: float) -> None
     |      
     |      
     |                  Set the specified linear and angular velocities for the body.
     |      
     |                  Args:
     |                      dx (float): x component of the linear velocity.
     |                      dy (float): y component of the linear velocity.
     |                      dz (float): z component of the linear velocity.
     |                      wx (float): x component of the angular velocity.
     |                      wy (float): y component of the angular velocity.
     |                      wz (float): z component of the angular velocity.
     |  
     |  update_collision(...)
     |      update_collision(self: raisimpy.SingleBodyObject) -> None
     |      
     |      Update the collisions.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Object:
     |  
     |  add_contact_to_per_object_contact(...)
     |      add_contact_to_per_object_contact(self: raisimpy.Object, contact: raisimpy.contact.Contact) -> None
     |  
     |  clear_per_object_contact(...)
     |      clear_per_object_contact(self: raisimpy.Object) -> None
     |  
     |  get_body_type(...)
     |      get_body_type(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_body_type(self: raisimpy.Object, arg0: int) -> raisimpy.BodyType
     |      
     |      2. get_body_type(self: raisimpy.Object) -> raisimpy.BodyType
     |  
     |  get_contacts(...)
     |      get_contacts(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |                  
     |      
     |      2. get_contacts(self: raisimpy.Object) -> List[raisimpy.contact.Contact]
     |      
     |      
     |                  Get the list of contact points.
     |      
     |                  Returns:
     |                      list[Contact]: list of contact points.
     |  
     |  get_index_in_world(...)
     |      get_index_in_world(self: raisimpy.Object) -> int
     |      
     |      
     |      Get the object index in the world.
     |      
     |      Returns:
     |          int: object index in the world.
     |  
     |  get_name(...)
     |      get_name(self: raisimpy.Object) -> str
     |      
     |      
     |      Get the object's name.
     |      
     |      Returns:
     |          str: object's name.
     |  
     |  get_world_linear_velocity(...)
     |      get_world_linear_velocity(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world linear velocity.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3]]: linear velocity expressed in the Cartesian world frame.
     |  
     |  get_world_position(...)
     |      get_world_position(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_world_position(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |                  Get the world position.
     |      
     |                  Args:
     |                      local_idx (int): local index.
     |      
     |                  Returns:
     |                      np.array[float[3]]: position expressed in the Cartesian world frame.
     |                  
     |      
     |      2. get_world_position(self: raisimpy.Object, arg0: int, arg1: numpy.ndarray[float64]) -> numpy.ndarray[float64]
     |  
     |  get_world_rotation_matrix(...)
     |      get_world_rotation_matrix(self: raisimpy.Object, local_idx: int) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the world orientation as a rotation matrix.
     |      
     |      Args:
     |          local_idx (int): local index.
     |      
     |      Returns:
     |          np.array[float[3,3]]: rotation matrix.
     |  
     |  set_index_in_world(...)
     |      set_index_in_world(self: raisimpy.Object, index: int) -> None
     |      
     |      
     |      Set the object index in the world.
     |      
     |      Args:
     |          index (int): object index.
     |  
     |  set_name(...)
     |      set_name(self: raisimpy.Object, name: str) -> None
     |      
     |      
     |      Set the object's name.
     |      
     |      Args:
     |          name (str): object's name.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Object:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class TerrainProperties(pybind11_builtins.pybind11_object)
     |  Raisim terrain properties
     |  
     |  Method resolution order:
     |      TerrainProperties
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.TerrainProperties) -> None
     |      
     |      Initialize the terrain properties
     |      
     |      2. __init__(self: raisimpy.TerrainProperties, frequency: float = 0.1, x_size: float = 10.0, y_size: float = 10.0, z_scale: float = 2.0, x_samples: int = 100, y_samples: int = 100, fractal_octaves: int = 5, fractal_lacunarity: float = 2.0, fractal_gain: float = 0.5, step_size: float = 0, seed: int = 1) -> None
     |      
     |      Initialize the terrain properties.
     |      
     |      Args:
     |          frequency (float): frequency.
     |          x_size (float): the size in the x direction.
     |          y_size (float): the size in the y direction.
     |          z_scale (float): z scale.
     |          x_samples (int): the number of samples in x.
     |          y_samples (int): the number of samples in y.
     |          fractal_octaves (int): the number of fractal octaves.
     |          fractal_lacunarity (float): the lacunarity of fractals.
     |          fractal_gain (float): fractal gain.
     |          step_size (float): the step size.
     |          seed (int): the random seed.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  fractal_gain
     |  
     |  fractal_lacunarity
     |  
     |  fractal_octaves
     |  
     |  frequency
     |  
     |  seed
     |  
     |  step_size
     |  
     |  x_samples
     |  
     |  x_size
     |  
     |  y_samples
     |  
     |  y_size
     |  
     |  z_scale
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Transformation(pybind11_builtins.pybind11_object)
     |  Raisim homogeneous transformation.
     |  
     |  Method resolution order:
     |      Transformation
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.Transformation) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  pos
     |  
     |  rot
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class VisualObject(pybind11_builtins.pybind11_object)
     |  Visual object is for visualization only
     |  
     |  Method resolution order:
     |      VisualObject
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: raisimpy.VisualObject) -> None
     |      
     |      Instantiate a visual object (by setting its orientation).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  group
     |  
     |  name
     |  
     |  pos_offset
     |  
     |  rotation_offset
     |  
     |  scale
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class World(pybind11_builtins.pybind11_object)
     |  Raisim world.
     |  
     |  Method resolution order:
     |      World
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: raisimpy.World) -> None
     |      
     |      Initialize the World.
     |      
     |      2. __init__(self: raisimpy.World, configFile: str) -> None
     |      
     |      Initialize the World from the given config file.
     |  
     |  add_articulated_system(...)
     |      add_articulated_system(self: raisimpy.World, urdf_path: str, res_path: str = '', joint_order: List[str] = [], collision_group: int = 1, collision_mask: int = 18446744073709551615, options: raisimpy.ArticulatedSystemOption = <raisimpy.ArticulatedSystemOption object at 0x7fedf087bc38>) -> raisimpy.ArticulatedSystem
     |      
     |      
     |      Add an articulated system in the world.
     |      
     |      Args:
     |      urdf_path (str): path to the URDF file.
     |      res_path (str): path to the resource directory. Leave it empty ('') if it is the urdf file directory.
     |      joint_order (list[str]): joint order.
     |      group (CollisionGroup): collision group.
     |      mask (CollisionGroup): collision mask.
     |      options (ArticulatedSystemOption): articulated system options.
     |      
     |      Returns:
     |          ArticulatedSystem: the articulated system instance.
     |  
     |  add_box(...)
     |      add_box(self: raisimpy.World, x: float, y: float, z: float, mass: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Box
     |      
     |      
     |      Add dynamically a box into the world.
     |      
     |      Args:
     |          x (float): length along the x axis.
     |          y (float): length along the y axis.
     |          z (float): length along the z axis.
     |          mass (float): mass of the box.
     |          material (str): material to be applied to the box.
     |          collision_group (unsigned long): collision group.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Box: the box instance.
     |  
     |  add_capsule(...)
     |      add_capsule(self: raisimpy.World, radius: float, height: float, mass: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Capsule
     |      
     |      
     |      Add dynamically a capsule into the world.
     |      
     |      Args:
     |          radius (float): radius of the capsule.
     |          height (float): height of the capsule.
     |          mass (float): mass of the capsule.
     |          material (str): material to be applied to the capsule.
     |          collision_group (unsigned long): collision group.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Capsule: the capsule instance.
     |  
     |  add_compliant_wire(...)
     |      add_compliant_wire(self: raisimpy.World, object1: raisimpy.Object, local_idx1: int, pos_body1: numpy.ndarray[float64], object2: raisimpy.Object, local_idx2: int, pos_body2: numpy.ndarray[float64], length: float, stiffness: float) -> raisimpy.constraints.CompliantWire
     |      
     |      
     |      Add a compliant wire constraint between two bodies in the world.
     |      
     |      Args:
     |      object1 (Object): first object/body instance.
     |          local_idx1 (int): local index of the first object/body.
     |          pos_body1 (np.array[float[3]]): position of the constraint on the first body.
     |      object2 (Object): second object/body instance.
     |          local_idx2 (int): local index of the second object/body.
     |          pos_body2 (np.array[float[3]]): position of the constraint on the second body.
     |      length (float): length of the wire constraint.
     |      stiffness (float): stiffness of the wire.
     |      
     |      Returns:
     |          CompliantWire: the compliant wire constraint instance.
     |  
     |  add_compound(...)
     |      add_compound(self: raisimpy.World, children: List[raisimpy.Compound.CompoundObjectChild], mass: float = '', inertia: numpy.ndarray[float64], collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Compound
     |      
     |      
     |      Add a compound body in the world.
     |      
     |      Args:
     |      children (list[CompoundObjectChild]): list of child object instance.
     |      mass (float): mass of the compound object.
     |      inertia (np.array[float[3,3]]): inertia matrix of the object.
     |      group (CollisionGroup): collision group.
     |      mask (CollisionGroup): collision mask.
     |      
     |      Returns:
     |          Compound: the compound body instance.
     |  
     |  add_cone(...)
     |      add_cone(self: raisimpy.World, radius: float, height: float, mass: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Cone
     |      
     |      
     |      Add dynamically a cone into the world.
     |      
     |      Args:
     |          radius (float): radius of the cone.
     |          height (float): height of the cone.
     |          mass (float): mass of the cone.
     |          material (str): material to be applied to the cone.
     |          collision_group (unsigned long): collision group.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Cone: the cone instance.
     |  
     |  add_cylinder(...)
     |      add_cylinder(self: raisimpy.World, radius: float, height: float, mass: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Cylinder
     |      
     |      
     |      Add dynamically a cylinder into the world.
     |      
     |      Args:
     |          radius (float): radius of the cylinder.
     |          height (float): height of the cylinder.
     |          mass (float): mass of the cylinder.
     |          material (str): material to be applied to the cylinder.
     |          collision_group (unsigned long): collision group.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Cylinder: the cylinder instance.
     |  
     |  add_ground(...)
     |      add_ground(self: raisimpy.World, height: float = 0.0, material: str = 'default', collision_mask: int = 18446744073709551615) -> raisimpy.Ground
     |      
     |      
     |      Add dynamically a ground into the world.
     |      
     |      Args:
     |          height (float): height of the ground.
     |          material (str): material to be applied to the ground.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Ground: the ground instance.
     |  
     |  add_heightmap(...)
     |      add_heightmap(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. add_heightmap(self: raisimpy.World, x_samples: int, y_samples: int, x_scale: float, y_scale: float, x_center: float, y_center: float, heights: List[float], material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.HeightMap
     |      
     |      
     |                  Add a heightmap into the world.
     |      
     |                  Args:
     |                      x_samples (int): the number of samples in x.
     |                      y_samples (int): the number of samples in y.
     |                  x_scale (float): the scale in the x direction.
     |                  y_scale (float): the scale in the y direction.
     |                  x_center (float): the x center of the heightmap in the world.
     |                  y_center (float): the y center of the heightmap in the world.
     |                  heights (list[float]): list of desired heights.
     |                  material (str): material.
     |                  group (CollisionGroup): collision group.
     |                  mask (CollisionGroup): collision mask.
     |      
     |                  Returns:
     |                      HeightMap: the heightmap instance.
     |                  
     |      
     |      2. add_heightmap(self: raisimpy.World, filename: str, x_center: float, y_center: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.HeightMap
     |      
     |      
     |                  Add a heightmap into the world.
     |      
     |                  Args:
     |                      filename (str): raisim heightmap filename.
     |                  x_center (float): the x center of the heightmap in the world.
     |                  y_center (float): the y center of the heightmap in the world.
     |                  material (str): material.
     |                  group (CollisionGroup): collision group.
     |                  mask (CollisionGroup): collision mask.
     |      
     |                  Returns:
     |                      HeightMap: the heightmap instance.
     |                  
     |      
     |      3. add_heightmap(self: raisimpy.World, filename: str, x_center: float, y_center: float, x_size: float, y_size: float, height_scale: float, height_offset: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.HeightMap
     |      
     |      
     |                  Add a heightmap into the world.
     |      
     |                  Args:
     |                      filename (str): filename to the PNG.
     |                      x_center (float): the x center of the heightmap in the world.
     |                  y_center (float): the y center of the heightmap in the world.
     |                  x_size (float): the size in the x direction.
     |                  y_size (float): the size in the y direction.
     |                      height_scale (float): the height scale.
     |                      height_offset (float): the height offset.
     |                  material (str): material.
     |                  group (CollisionGroup): collision group.
     |                  mask (CollisionGroup): collision mask.
     |      
     |                  Returns:
     |                      HeightMap: the heightmap instance.
     |                  
     |      
     |      4. add_heightmap(self: raisimpy.World, x_center: float, y_center: float, terrain_properties: raisimpy.TerrainProperties, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.HeightMap
     |      
     |      
     |                  Add a heightmap into the world.
     |      
     |                  Args:
     |                  x_center (float): the x center of the heightmap in the world.
     |                  y_center (float): the y center of the heightmap in the world.
     |                  terrain_properties (TerrainProperties): the terrain properties.
     |                  material (str): material.
     |                  group (CollisionGroup): collision group.
     |                  mask (CollisionGroup): collision mask.
     |      
     |                  Returns:
     |                      HeightMap: the heightmap instance.
     |  
     |  add_mesh(...)
     |      add_mesh(self: raisimpy.World, file_name: str, mass: float, inertia: numpy.ndarray[float64], com: numpy.ndarray[float64], scale: float = 1.0, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Mesh
     |      
     |      
     |      Add a mesh in the world.
     |      
     |      Args:
     |      file_name (str): full path of the mesh file.
     |      mass (float): mass of the compound object.
     |      inertia (np.array[float[3,3]]): inertia matrix of the object.
     |      com (np.array[float[3,1]]): the location of the center of mass
     |      material (str): material
     |      group (CollisionGroup): collision group.
     |      mask (CollisionGroup): collision mask.
     |      
     |      Returns:
     |          Mesh: the mesh instance.
     |  
     |  add_sphere(...)
     |      add_sphere(self: raisimpy.World, radius: float, mass: float, material: str = 'default', collision_group: int = 1, collision_mask: int = 18446744073709551615) -> raisimpy.Sphere
     |      
     |      
     |      Add dynamically a sphere into the world.
     |      
     |      Args:
     |          radius (float): radius of the sphere.
     |          mass (float): mass of the sphere.
     |          material (str): material to be applied to the sphere.
     |          collision_group (unsigned long): collision group.
     |          collision_mask (unsigned long): collision mask.
     |      
     |      Returns:
     |          Sphere: the sphere instance.
     |  
     |  add_stiff_wire(...)
     |      add_stiff_wire(self: raisimpy.World, object1: raisimpy.Object, local_idx1: int, pos_body1: numpy.ndarray[float64], object2: raisimpy.Object, local_idx2: int, pos_body2: numpy.ndarray[float64], length: float) -> raisimpy.constraints.StiffWire
     |      
     |      
     |      Add a stiff wire constraint between two bodies in the world.
     |      
     |      Args:
     |      object1 (Object): first object/body instance.
     |          local_idx1 (int): local index of the first object/body.
     |          pos_body1 (np.array[float[3]]): position of the constraint on the first body.
     |      object2 (Object): second object/body instance.
     |          local_idx2 (int): local index of the second object/body.
     |          pos_body2 (np.array[float[3]]): position of the constraint on the second body.
     |      length (float): length of the wire constraint.
     |      
     |      Returns:
     |          StiffWire: the stiff wire constraint instance.
     |  
     |  get_configuration_number(...)
     |      get_configuration_number(self: raisimpy.World) -> int
     |      
     |      
     |      Get the number of elements that are in the world. The returned number is updated everytime that we add or
     |      remove an object from the world.
     |      
     |      Returns:
     |          int: the number of objects in the world.
     |  
     |  get_constraint(...)
     |      get_constraint(self: raisimpy.World, name: str) -> raisimpy.constraints.Constraints
     |      
     |      
     |      Get the specified constraint instance from its unique name.
     |      
     |      Args:
     |      name (str): unique name of the constraint instance we want to get.
     |      
     |      Returns:
     |          Constraints, None: the specified constraint instance. None, if it didn't find the constraint.
     |  
     |  get_contact_problems(...)
     |      get_contact_problems(self: raisimpy.World) -> List[raisimpy.contact.Single3DContactProblem]
     |      
     |      
     |      Return the list of contacts.
     |  
     |  get_contact_solver(...)
     |      get_contact_solver(self: raisimpy.World) -> raisimpy.contact.BisectionContactSolver
     |      
     |      
     |      Return the bisection contact solver used.
     |      
     |      Returns:
     |          BisectionContactSolver: contact solver.
     |  
     |  get_gravity(...)
     |      get_gravity(self: raisimpy.World) -> numpy.ndarray[float64]
     |      
     |      
     |      Get the gravity vector from the world.
     |      
     |      Returns:
     |          np.array[float[3]]: gravity vector.
     |  
     |  get_object(...)
     |      get_object(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. get_object(self: raisimpy.World, name: str) -> raisimpy.Object
     |      
     |      
     |                  Get the specified object instance from its unique name.
     |      
     |                  Args:
     |                  name (str): unique name of the object instance we want to get.
     |      
     |                  Returns:
     |                      Object, None: the specified object instance. None, if it didn't find the object.
     |                  
     |      
     |      2. get_object(self: raisimpy.World, world_index: int) -> raisimpy.Object
     |      
     |      
     |                  Get the specified object instance from its unique name.
     |      
     |                  Args:
     |                  name (str): unique name of the object instance we want to get.
     |      
     |                  Returns:
     |                      Object, None: the specified object instance. None, if it didn't find the object.
     |  
     |  get_object_list(...)
     |      get_object_list(self: raisimpy.World) -> List[raisimpy.Object]
     |      
     |      
     |      Return the list of object instances that are in the world.
     |      
     |      Returns:
     |          list[Object]: list of object instances.
     |  
     |  get_time_step(...)
     |      get_time_step(self: raisimpy.World) -> float
     |      
     |      
     |      Get the current time step that has been set in the simulator.
     |      
     |      Returns:
     |          float: time step.
     |  
     |  get_wire(...)
     |      get_wire(self: raisimpy.World, name: str) -> raisimpy.constraints.Wire
     |      
     |      
     |      Get the specified wire instance from its unique name.
     |      
     |      Args:
     |      name (str): unique name of the wire instance we want to get.
     |      
     |      Returns:
     |          Constraints: the specified wire instance. None, if it didn't find the wire.
     |  
     |  get_world_time(...)
     |      get_world_time(self: raisimpy.World) -> float
     |      
     |      
     |      Return the total integrated time (which is updated at every `integrate2()`` call).
     |      
     |      Returns:
     |          float: world time.
     |  
     |  integrate(...)
     |      integrate(self: raisimpy.World) -> None
     |      
     |      this function is simply calling both `integrate1()` and `integrate2()` one-by-one.
     |  
     |  integrate1(...)
     |      integrate1(self: raisimpy.World) -> None
     |      
     |      
     |      It performs:
     |      1. deletion contacts from previous time step
     |      2. collision detection
     |      3. register contacts to each body
     |      4. calls `preContactSolverUpdate1()` of each object
     |  
     |  integrate2(...)
     |      integrate2(self: raisimpy.World) -> None
     |      
     |      
     |      It performs
     |      1. calls `preContactSolverUpdate2()` of each body
     |      2. run collision solver
     |      3. calls `integrate` method of each object
     |  
     |  remove_object(...)
     |      remove_object(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. remove_object(self: raisimpy.World, obj: raisimpy.Object) -> None
     |      
     |      
     |                  Remove dynamically an object from the world.
     |      
     |                  Args:
     |                      obj (Object): the object to be removed from the world.
     |                  
     |      
     |      2. remove_object(self: raisimpy.World, wire: raisimpy.constraints.StiffWire) -> None
     |      
     |      
     |                  Remove dynamically a stiff wire from the world.
     |      
     |                  Args:
     |                      wire (StiffWire): the stiff wire to be removed from the world.
     |                  
     |      
     |      3. remove_object(self: raisimpy.World, wire: raisimpy.constraints.CompliantWire) -> None
     |      
     |      
     |                  Remove dynamically a compliant wire from the world.
     |      
     |                  Args:
     |                      wire (CompliantWire): the compliant wire to be removed from the world.
     |  
     |  set_contact_solver_parameters(...)
     |      set_contact_solver_parameters(self: raisimpy.World, alpha_init: float, alpha_min: float, alpha_decay: float, max_iters: int, threshold: float) -> None
     |      
     |      
     |      Set contact solver parameters.
     |      
     |      Args:
     |          alpha_init (float): alpha init.
     |          alpha_min (float): alpha minimum.
     |          alpha_decay (float): alpha decay.
     |          max_iters (float): maximum number of iterations.
     |          threshold (float): threshold.
     |  
     |  set_default_material(...)
     |      set_default_material(self: raisimpy.World, friction: float, restitution: float, threshold: float) -> None
     |      
     |      
     |      Set the default material.
     |      
     |      Args:
     |          friction (float): coefficient of friction.
     |          restitution (float): coefficient of restitution.
     |          threshold (float): restitution threshold.
     |  
     |  set_erp(...)
     |      set_erp(self: raisimpy.World, erp: float, erp2: float = 0) -> None
     |      
     |      Set the error reduction parameter (ERP).
     |  
     |  set_gravity(...)
     |      set_gravity(self: raisimpy.World, gravity: numpy.ndarray[float64]) -> None
     |      
     |      
     |      Set the gravity vector in the world.
     |      
     |      Args:
     |          np.array[float[3]]: gravity vector.
     |  
     |  set_material_pair_properties(...)
     |      set_material_pair_properties(self: raisimpy.World, material1: str, material2: str, friction: float, restitution: float, threshold: float) -> None
     |      
     |      
     |      Set material pair properties.
     |      
     |      Args:
     |          material1 (str): first material.
     |          material2 (str): second material.
     |          friction (float): coefficient of friction.
     |          restitution (float): coefficient of restitution.
     |          threshold (float): restitution threshold.
     |  
     |  set_time_step(...)
     |      set_time_step(self: raisimpy.World, dt: float) -> None
     |      
     |      
     |      Set the given time step `dt` in the simulator.
     |      
     |      Args:
     |          dt (float): time step to be set in the simulator.
     |  
     |  set_world_time(...)
     |      set_world_time(self: raisimpy.World, time: float) -> None
     |      
     |      
     |      Set the world time.
     |      
     |      Args:
     |          time (float): world time
     |  
     |  update_material_property(...)
     |      update_material_property(self: raisimpy.World, prop: raisimpy.MaterialManager) -> None
     |      
     |      
     |      Update material property.
     |      
     |      Args:
     |          prop (MaterialManager): material manager property instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class dGeomID(pybind11_builtins.pybind11_object)
     |  geometry collision object from ode (in ode/common.h).
     |  
     |  Method resolution order:
     |      dGeomID
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class dSpaceID(pybind11_builtins.pybind11_object)
     |  collision space from ode (in ode/common.h).
     |  
     |  Method resolution order:
     |      dSpaceID
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class gui(pybind11_builtins.pybind11_object)
     |  RaiSim gui state.
     |  
     |  Method resolution order:
     |      gui
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  manual_stepping
     |  
     |  show_bodies
     |  
     |  show_collisions
     |  
     |  show_contacts
     |  
     |  show_forces
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.

DATA
    __authors__ = ['Jemin Hwangbo (raisim)', 'Donho Kang (raisim)', 'Joonh...
    __license__ = 'MIT'

FILE
    /mnt/c/Users/Srikar/Documents/RLTVC/raisim_build/lib/raisimpy.cpython-36m-x86_64-linux-gnu.so


